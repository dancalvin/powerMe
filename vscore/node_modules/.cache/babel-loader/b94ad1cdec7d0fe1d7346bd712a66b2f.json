{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScoreLogic(_ref) {\n  _s();\n  let {\n    age,\n    sex,\n    race,\n    feet,\n    inches,\n    heightUnit,\n    weight,\n    weightUnit,\n    pressure,\n    hdl,\n    trigl,\n    glucose,\n    newWeight,\n    newPressure,\n    newHdl,\n    newTrigl,\n    newGlucose,\n    setScoreStyle,\n    score,\n    a1c,\n    newA1c,\n    a1cPref,\n    newA1cPref,\n    diastolicBP,\n    newDiastolicBP\n  } = _ref;\n  const [bmi, setBmi] = useState(25);\n  const [zNumber, setZNumber] = useState(20);\n  const [percentile, setPercentile] = useState(20);\n  const [miscData, setMiscData] = useState(100);\n  // <div>BMI:{bmi.toFixed(0)}<br></br>{((percentile -100)*-1).toFixed(0)}%</div>\n\n  useEffect(() => {\n    if (score === 0) {\n      let sugarNumber = 0;\n      sugarNumber = parseInt(glucose);\n      let realHeight = feet * 12 + parseInt(inches);\n      let heightSquared = realHeight * realHeight;\n      let weightStarter = weight * 703;\n      setMiscData(heightSquared);\n      setBmi(weightStarter / heightSquared);\n      if (sex === \"Male\") {\n        setZNumber(-4.8316 + 0.0315 * bmi - 0.0272 * parseInt(hdl) + 0.0044 * parseInt(pressure) + 0.8018 * Math.log(parseInt(trigl)) + 0.0101 * sugarNumber);\n      } else {\n        setZNumber(-6.5231 + 0.0523 * bmi - 0.0138 * parseInt(hdl) + 0.0081 * parseInt(pressure) + 0.6125 * Math.log(parseInt(trigl)) + 0.0208 * sugarNumber);\n      }\n      setPercentile(100 * (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber))));\n    } else {\n      let sugarNumber = 0;\n      if (newA1cPref === 0) {\n        sugarNumber = parseInt(newGlucose);\n      } else {\n        sugarNumber = parseInt(parseFloat(newA1c) * 28.7 - 46.7);\n      }\n      let realHeight = feet * 12 + parseInt(inches);\n      let heightSquared = realHeight * realHeight;\n      let weightStarter = newWeight * 703;\n      setMiscData(heightSquared);\n      setBmi(weightStarter / heightSquared);\n      if (sex === \"Male\") {\n        setZNumber(-4.8316 + 0.0315 * bmi - 0.0272 * parseInt(newHdl) + 0.0044 * parseInt(newPressure) + 0.8018 * Math.log(parseInt(newTrigl)) + 0.0101 * sugarNumber);\n      } else {\n        setZNumber(-6.5231 + 0.0523 * bmi - 0.0138 * parseInt(newHdl) + 0.0081 * parseInt(newPressure) + 0.6125 * Math.log(parseInt(newTrigl)) + 0.0208 * sugarNumber);\n      }\n      setPercentile(100 * (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber))));\n    }\n  });\n  useEffect(() => {\n    if (setScoreStyle) {\n      const result = ((percentile - 100) * -1).toFixed(0);\n      setScoreStyle(result);\n    }\n  }, [percentile]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: ((percentile - 100) * -1).toFixed(0)\n  }, void 0, false);\n}\n_s(ScoreLogic, \"02s2AhpJLb+cfDIrGtf+Tuytfkw=\");\n_c = ScoreLogic;\nvar _c;\n$RefreshReg$(_c, \"ScoreLogic\");","map":{"version":3,"names":["React","useState","useEffect","ScoreLogic","age","sex","race","feet","inches","heightUnit","weight","weightUnit","pressure","hdl","trigl","glucose","newWeight","newPressure","newHdl","newTrigl","newGlucose","setScoreStyle","score","a1c","newA1c","a1cPref","newA1cPref","diastolicBP","newDiastolicBP","bmi","setBmi","zNumber","setZNumber","percentile","setPercentile","miscData","setMiscData","sugarNumber","parseInt","realHeight","heightSquared","weightStarter","Math","log","exp","pow","parseFloat","result","toFixed"],"sources":["/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/ScoreLogic.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function ScoreLogic(\n{\n  age,\n  sex,\n  race,\n  feet,\n  inches,\n  heightUnit,\n  weight,\n  weightUnit,\n  pressure,\n  hdl,\n  trigl,\n  glucose,\n  newWeight,\n  newPressure,\n  newHdl,\n  newTrigl,\n  newGlucose,\n  setScoreStyle,\n  score,\n  a1c,\n  newA1c,\n  a1cPref,\n  newA1cPref,\n  diastolicBP, \n  newDiastolicBP,\n}) \n{\n  const [bmi, setBmi] = useState(25);\n  const [zNumber, setZNumber] = useState(20);\n  const [percentile, setPercentile] = useState(20);\n  const [miscData, setMiscData] = useState(100);\n  // <div>BMI:{bmi.toFixed(0)}<br></br>{((percentile -100)*-1).toFixed(0)}%</div>\n\n  useEffect(() => \n  {\n    if(score === 0)\n    {\n      let sugarNumber = 0;\n      sugarNumber = parseInt(glucose);\n\n      let realHeight = feet * 12 + parseInt(inches);\n      let heightSquared = realHeight * realHeight;\n      let weightStarter = weight * 703;\n\n      setMiscData(heightSquared);\n      setBmi(weightStarter / heightSquared);\n      if (sex === \"Male\") {\n        setZNumber(\n          -4.8316 +\n            0.0315 * bmi -\n            0.0272 * parseInt(hdl) +\n            0.0044 * parseInt(pressure) +\n            0.8018 * Math.log(parseInt(trigl)) +\n            0.0101 * sugarNumber\n        );\n      } else {\n        setZNumber(\n          -6.5231 +\n            0.0523 * bmi -\n            0.0138 * parseInt(hdl) +\n            0.0081 * parseInt(pressure) +\n            0.6125 * Math.log(parseInt(trigl)) +\n            0.0208 * sugarNumber\n        );\n      }\n      setPercentile(\n        100 *\n          (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber)))\n      );\n    }\n    else\n    {\n      let sugarNumber = 0;\n      if (newA1cPref === 0)\n      {\n        sugarNumber = parseInt(newGlucose);\n      }\n      else\n      {\n        sugarNumber = parseInt((parseFloat(newA1c) * 28.7) - 46.7);\n      }\n\n      let realHeight = feet * 12 + parseInt(inches);\n      let heightSquared = realHeight * realHeight;\n      let weightStarter = newWeight * 703;\n      setMiscData(heightSquared);\n      setBmi(weightStarter / heightSquared);\n      if (sex === \"Male\") \n      {\n        setZNumber(\n          -4.8316 +\n            0.0315 * bmi -\n            0.0272 * parseInt(newHdl) +\n            0.0044 * parseInt(newPressure) +\n            0.8018 * Math.log(parseInt(newTrigl)) +\n            0.0101 * sugarNumber\n        );\n      } \n      else \n      {\n        setZNumber(\n          -6.5231 +\n            0.0523 * bmi -\n            0.0138 * parseInt(newHdl) +\n            0.0081 * parseInt(newPressure) +\n            0.6125 * Math.log(parseInt(newTrigl)) +\n            0.0208 * sugarNumber\n        );\n      }\n      setPercentile(\n        100 *\n          (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber)))\n      );\n    }\n  });\n    \n  useEffect(() => \n  {\n    if (setScoreStyle) \n    {\n      const result = ((percentile - 100) * -1).toFixed(0);\n      setScoreStyle(result);\n    }\n  }, [percentile]);\n\n    return <>{((percentile - 100) * -1).toFixed(0)}</>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}