[{"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/index.js":"1","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/App.js":"2","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Index.jsx":"3","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/Footer.jsx":"4","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/Header.jsx":"5","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Steps.jsx":"6","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/index.jsx":"7","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step2.jsx":"8","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step1.jsx":"9","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step3.jsx":"10","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step4.jsx":"11","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step5.jsx":"12","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/localStore/index.js":"13","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityScoreGraph.jsx":"14","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CircleModel/MetaCalc.jsx":"15","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/utils/index.jsx":"16","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/SVG.jsx":"17","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/VitalityScore.jsx":"18","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CustomSelect.jsx":"19","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/RangeSlider/RangeSliderModul.js":"20","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CircleModel/CircleModel.jsx":"21","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/RangeSlider/RangeSlider.jsx":"22","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/ScoreLogic.jsx":"23","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityStatsBlock.jsx":"24","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityScoreHistory.jsx":"25","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityHistoryGraph.jsx":"26","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/EditVitalityCalculator/index.jsx":"27","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/CommonComponents/index.jsx":"28"},{"size":276,"mtime":1670312718543,"results":"29","hashOfConfig":"30"},{"size":401,"mtime":1671026994583,"results":"31","hashOfConfig":"30"},{"size":182,"mtime":1670312718543,"results":"32","hashOfConfig":"30"},{"size":544,"mtime":1670312718543,"results":"33","hashOfConfig":"30"},{"size":383,"mtime":1670312718543,"results":"34","hashOfConfig":"30"},{"size":9326,"mtime":1671105144707,"results":"35","hashOfConfig":"30"},{"size":6515,"mtime":1671092002939,"results":"36","hashOfConfig":"30"},{"size":6767,"mtime":1671104843350,"results":"37","hashOfConfig":"30"},{"size":2299,"mtime":1671103894513,"results":"38","hashOfConfig":"30"},{"size":4916,"mtime":1671105833390,"results":"39","hashOfConfig":"30"},{"size":5723,"mtime":1671105745175,"results":"40","hashOfConfig":"30"},{"size":12925,"mtime":1671105587792,"results":"41","hashOfConfig":"30"},{"size":571,"mtime":1671014018801,"results":"42","hashOfConfig":"30"},{"size":2909,"mtime":1671091697997,"results":"43","hashOfConfig":"30"},{"size":1591,"mtime":1670312718543,"results":"44","hashOfConfig":"30"},{"size":3836,"mtime":1671014018825,"results":"45","hashOfConfig":"30"},{"size":1282,"mtime":1670312718543,"results":"46","hashOfConfig":"30"},{"size":4354,"mtime":1671041199995,"results":"47","hashOfConfig":"30"},{"size":2086,"mtime":1670312718543,"results":"48","hashOfConfig":"30"},{"size":1044,"mtime":1670312718543,"results":"49","hashOfConfig":"30"},{"size":1457,"mtime":1671035840865,"results":"50","hashOfConfig":"30"},{"size":894,"mtime":1670312718543,"results":"51","hashOfConfig":"30"},{"size":581,"mtime":1671014018409,"results":"52","hashOfConfig":"30"},{"size":13666,"mtime":1671091860051,"results":"53","hashOfConfig":"30"},{"size":8500,"mtime":1671096839908,"results":"54","hashOfConfig":"30"},{"size":2106,"mtime":1670479948593,"results":"55","hashOfConfig":"30"},{"size":8605,"mtime":1671106071938,"results":"56","hashOfConfig":"30"},{"size":702,"mtime":1671014018273,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bh1d17",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/index.js",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/App.js",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Index.jsx",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/Footer.jsx",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/Header.jsx",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Steps.jsx",["163","164","165","166","167"],[],"// This file adds the 5 bubbles and instantiates the initial form array. It progresses through the steps and renders the appropriate form segment based on the step number\n\n// Define which files are to be included in the steps\n\nimport React, { useState } from \"react\";\nimport isToday from \"date-fns/isToday\";\nimport { isSameDay } from \"date-fns\";\nimport differenceInDays from \"date-fns/differenceInDays\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Step3 from \"./Step3\";\nimport Step4 from \"./Step4\";\nimport Step5 from \"./Step5\";\nimport VitalityHistory from \"../VitalityHistory/index\";\nimport { setItem, getItem, deleteItem, clearls } from \"../../localStore\";\nconst steps = [\"step1\", \"step2\", \"step3\", \"step4\", \"step5\", \"step6\"];\n\n// Define the data that will be collected in the form\nconst initForm = {\n  age: 50,\n  sex: \"\",\n  asian: false,\n  pacIsl: false,\n  whiteOrCaucas: false,\n  blackAfrAmer: false,\n  hispLat: false,\n  natAmerAlas: false,\n  multBirac: false,\n  notListed: false,\n  extraRace: \"\",\n  feet: \"\",\n  inches: \"\",\n  heightUnit: \"(in)\",\n  weight: \"\",\n  weightUnit: \"(lbs)\",\n  pressure: 120,\n  hdl: 60,\n  trigl: 150,\n  glucose: 90,\n  a1c: 4.7,\n  newWeight: 150,\n  newPressure: 120,\n  newHdl: 60,\n  newTrigl: 150,\n  newGlucose: 90,\n  waist: \"\",\n  newWaist: 30,\n  diastolicBP: 70,\n  newDiastolicBP: 70,\n  metabolicAge: 0,\n  a1cPref: 0,\n  newA1cPref: 0,\n  newA1c: 4.7,\n};\n\nconst classNames = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\"];\n// Define the default export function for Steps.jsx\nexport default function Steps() {\n  // add the variables form and step using useState. set form var to initForm data from and set step var to the first step in the steps array\n  const [form, setForm] = useState(initForm);\n  const [step, setStep] = useState(steps[0]);\n\n  // Spread operator used to copy data from one array to another\n  const updateForm = (data) => {\n    setForm({ ...form, ...data });\n  };\n\n  // this function helps to set the corresponding items in the array to their matching input value\n  const setInput = (key) => (event) =>\n    updateForm({ [key]: event.target.value });\n\n  // this function helps to set the corresponding items in the array to their matching input value\n  const setInputDirect = (keyOne, directValueOne, keyTwo, directValueTwo) => {\n    updateForm({ [keyOne]: directValueOne, [keyTwo]: directValueTwo });\n  };\n\n  // this function helps set the checks for the items that are clicked by the user\n  const setCheckbox = (key) => (event) =>\n    updateForm({ [key]: event.target.checked });\n\n  // use this funtion to get the index of the current step\n  const currentIndex = React.useMemo(() => steps.indexOf(step), [step]);\n\n  // Define function for changing step to go back one\n  const prevTab = () => {\n    if (currentIndex > 0) setStep(steps[currentIndex - 1]);\n  };\n  // Define function to change step to go forward one\n  const nextTab = () => {\n    if (currentIndex < steps.length - 1) setStep(steps[currentIndex + 1]);\n    window.scrollTo(0, 0);\n\n    let lastTestId,\n      lastTest,\n      isTestAlreadyExist = false;\n    // steps iteration\n    if (currentIndex == 3) {\n      // get saved data forms from localstorage\n      const oldTests = getItem(\"forms\");\n      if (oldTests) {\n        for (let i = 0; i < oldTests.length; i++) {\n          if (\n            differenceInDays(new Date(oldTests[i].timeStamp), new Date()) <=\n              1 &&\n            isSameDay(new Date(oldTests[i].timeStamp), new Date())\n          ) {\n            isTestAlreadyExist = true;\n            break;\n          }\n        }\n\n        lastTest = oldTests[oldTests.length - 1];\n        lastTestId = parseInt(lastTest.id);\n\n        if (isTestAlreadyExist) {\n          if (\n            window.confirm(\n              \"Do you want to override your previous test on the same data?\"\n            )\n          ) {\n            oldTests[oldTests.length - 1][\"form\"] = form;\n            setItem(\"forms\", oldTests);\n          }\n        } else {\n          oldTests.push({\n            id: lastTestId + 1,\n            timeStamp: new Date(),\n            form: form,\n          });\n          setItem(\"forms\", oldTests);\n        }\n      } else {\n        setItem(\"forms\", [{ id: 1, timeStamp: new Date(), form: form }]);\n      }\n    }\n  };\n\n  const saveYourGoals = () => {\n    // get saved data forms from localstorage\n    if (form) {\n      let oldTests;\n      oldTests = getItem(\"forms\");\n      oldTests[oldTests.length - 1][\"form\"] = form;\n      if (oldTests) {\n        setItem(\"forms\", oldTests);\n        alert(\"Your goals have been saved.\");\n      } else {\n        setItem(\"forms\", [{ id: 1, timeStamp: new Date(), form: form }]);\n      }\n    }\n  };\n\n  const jumpTab = (index) => {\n    if (index < steps.length - 1) setStep(steps[index]);\n    // we have old forms data stored on localstorage\n    const oldTests = getItem(\"forms\");\n    if (oldTests) {\n      // check the vitality history for the last submitted form\n      setForm(oldTests[oldTests.length - 1].form);\n      window.scrollTo(0, 0);\n    }\n  };\n\n  // Define function to change to a specified step\n  const goToTab = (step) => {\n    setStep(steps[step]);\n    window.scrollTo(0, 0);\n  };\n  const commonProps = {\n    prevTab,\n    nextTab,\n    jumpTab,\n    form,\n    updateForm,\n    setInput,\n    setInputDirect,\n    setCheckbox,\n    saveYourGoals,\n  };\n\n  // this function fills in the circles by using css and additonal class names fill and active to bold the text\n  // add the following line to lie 94ish righ tafter className to add onlick step setter\n  // onClick={() => {setStep(steps[0]);}}\n  return (\n    <div className=\"steps\">\n      <div className=\"auto__container box-content max-sm:px-[16px]\">\n        <div className=\"steps__inner\">\n          {step === steps[5] ? null : (\n            <>\n              <h1 className={`${classNames[currentIndex]} `}>\n                Calculate your Vitality score\n              </h1>\n              <div className=\"steps__line\">\n                <div className=\"steps__item\">\n                  <div\n                    className={\n                      \"steps__item-circle \" + (currentIndex === 0 ? \"fill\" : \"\")\n                    }\n                  >\n                    1\n                  </div>\n                  <div\n                    className={\n                      \"steps__item-title \" +\n                      (currentIndex === 0 ? \"active\" : \"\")\n                    }\n                  >\n                    Intro\n                  </div>\n                </div>\n                <div className=\"steps__item\">\n                  <div\n                    className={\n                      \"steps__item-circle \" + (currentIndex === 1 ? \"fill\" : \"\")\n                    }\n                  >\n                    2\n                  </div>\n                  <div\n                    className={\n                      \"steps__item-title \" +\n                      (currentIndex === 1 ? \"active\" : \"\")\n                    }\n                  >\n                    Tell Us About Yourself\n                  </div>\n                </div>\n                <div className=\"steps__item\">\n                  <div\n                    className={\n                      \"steps__item-circle \" + (currentIndex === 2 ? \"fill\" : \"\")\n                    }\n                  >\n                    3\n                  </div>\n                  <div\n                    className={\n                      \"steps__item-title \" +\n                      (currentIndex === 2 ? \"active\" : \"\")\n                    }\n                  >\n                    Measurements\n                  </div>\n                </div>\n                <div className=\"steps__item\">\n                  <div\n                    className={\n                      \"steps__item-circle \" + (currentIndex === 3 ? \"fill\" : \"\")\n                    }\n                  >\n                    4\n                  </div>\n                  <div\n                    className={\n                      \"steps__item-title \" +\n                      (currentIndex === 3 ? \"active\" : \"\")\n                    }\n                  >\n                    Lab Values\n                  </div>\n                </div>\n                <div className=\"steps__item\">\n                  <div\n                    className={\n                      \"steps__item-circle \" + (currentIndex === 4 ? \"fill\" : \"\")\n                    }\n                  >\n                    5\n                  </div>\n                  <div\n                    className={\n                      \"steps__item-title \" +\n                      (currentIndex === 4 ? \"active\" : \"\")\n                    }\n                  >\n                    Results\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          {step === steps[0] && <Step1 {...commonProps} />}\n          {step === steps[1] && <Step2 {...commonProps} />}\n          {step === steps[2] && <Step3 {...commonProps} />}\n          {step === steps[3] && <Step4 {...commonProps} />}\n          {step === steps[4] && <Step5 {...commonProps} />}\n        </div>\n      </div>\n\n      {step === steps[5] && (\n        <div className=\"\">\n          <div className=\"auto__container box-content max-sm:px-[0px]\">\n            <VitalityHistory {...commonProps} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/index.jsx",["168","169","170","171","172"],[],"import React, { useState, useEffect } from \"react\";\nimport { compareAsc, format } from \"date-fns\";\nimport VitalityStatsBlock from \"./VitalityStatsBlock\";\nimport VitalityScoreHistory from \"./VitalityScoreHistory\";\n\nimport { getVitalityScore, getMetaAge } from \"../../utils\";\nimport { setItem, getItem, deleteItem, clearls } from \"../../localStore\";\n\nexport default function VitalityHistory(props) {\n  const [deletePopupToggle, setDeletePopupToggle] = useState(false);\n  const [historyData, setHistoryData] = useState([]);\n  const [deleteEntry, setDeleteEntry] = useState(null);\n\n  useEffect(() => {\n    loadHistoryData();\n  }, []);\n\n  const setDeletePopupToggleFunc = (entry) => {\n    setDeleteEntry(entry);\n    setDeletePopupToggle(!deletePopupToggle);\n  };\n\n  const deleteEntryFunc = () => {\n    const oldTests = historyData;\n    const deleteEntryIndex = deleteEntry.index;\n    if (deleteEntryIndex > -1 && deleteEntryIndex < oldTests.length) {\n      oldTests.splice(deleteEntryIndex, 1);\n      setItem(\"forms\", oldTests);\n      setDeletePopupToggle(false);\n      loadHistoryData();\n    }\n  };\n\n  const loadHistoryData = () => {\n    const oldTests = getItem(\"forms\");\n    const copyOldTests = [].concat(oldTests);\n    copyOldTests.sort(function (a, b) {\n      var keyA = new Date(a.timeStamp),\n        keyB = new Date(b.timeStamp);\n      // Compare the 2 dates\n      if (keyA < keyB) return 1;\n      if (keyA > keyB) return -1;\n      return 0;\n    });\n    setHistoryData(copyOldTests);\n  };\n\n  return (\n    <div className=\"container mt-0 w-full max-w-none sm:mb-8 sm:px-6 \">\n      <div className=\"m-auto max-w-[1080px]\">\n        <div className=\"bg-primary sm:bg-transparent\">\n          <h1 className=\"mb-[60px] max-sm:mb-0 max-sm:!py-8 max-sm:text-white\">\n            Vitality History\n          </h1>\n        </div>\n        <div>\n          <VitalityStatsBlock\n            historyData={historyData}\n            loadHistoryData={loadHistoryData}\n          />\n          <div className=\"max-sm:px-[16px]\">\n            {historyData.map((singleHistory, index) => (\n              <VitalityScoreHistory\n                key={index}\n                index={index}\n                form={singleHistory.form}\n                timeStamp={singleHistory.timeStamp}\n                vsHistory={singleHistory}\n                setDeletePopupToggleFunc={setDeletePopupToggleFunc}\n                loadHistoryData={loadHistoryData}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      {deletePopupToggle ? (\n        <DeletePopup\n          close={() => setDeletePopupToggle(false)}\n          deleteEntryFunc={deleteEntryFunc}\n          deleteEntry={deleteEntry}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nfunction DeletePopup(props) {\n  const [vsHistory, setVsHistory] = useState(false);\n  const [scoreStyle, setScoreStyle] = useState(\"\");\n  const [metabolicAge, setMetabolicAge] = useState(0);\n\n  useEffect(() => {\n    const vScore = getVitalityScore({\n      ...props.deleteEntry.form,\n      [\"score\"]: 0,\n    });\n    const metaAgeData = getMetaAge({ ...props.deleteEntry.form });\n    setScoreStyle(vScore);\n    setMetabolicAge(metaAgeData);\n    setVsHistory(props.vsHistory);\n  }, [props]);\n\n  return (\n    <div className=\"fixed top-0 left-0 bottom-0 right-0 flex items-center justify-center\">\n      <div className=\"fixed top-0 left-0 bottom-0 right-0 flex items-center justify-center bg-black opacity-[0.65]\"></div>\n      <div className=\"relative z-10 mx-4 w-full max-w-5xl bg-secondary py-10 px-10 md:py-16 md:px-20\">\n        <div\n          className=\"absolute right-4 top-4 flex h-8 w-8 cursor-pointer items-center justify-center rounded-full border-[1px] md:right-8 md:top-8\"\n          onClick={props.close}\n        >\n          <svg\n            width=\"14\"\n            height=\"13\"\n            viewBox=\"0 0 14 13\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M10.8267 12.9723L7.20797 9.35357L3.67244 12.8891L0.989592 10.2063L4.52513 6.67072L0.927201 3.0728L3.46447 0.535534L7.06239 4.13346L10.5979 0.597925L13.2808 3.28077L9.74524 6.8163L13.364 10.435L10.8267 12.9723Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </div>\n\n        <div>\n          <div>\n            <p className=\"text-lg md:text-2xl\">\n              Are you sure you would like to delete this goal?\n            </p>\n          </div>\n          <div className=\"mt-6\">\n            <div className=\"border-[1px] border-l-[10px] border-l-primary py-5 px-6 md:border-l-[15px] md:px-20\">\n              <div>\n                <span className=\"font-montserrat text-xl font-bold leading-6 text-black \">\n                  {format(\n                    new Date(props.deleteEntry.timeStamp),\n                    \"MMMM, dd yyyy\"\n                  )}\n                </span>\n              </div>\n\n              <div className=\"flex flex-col flex-wrap sm:flex-row \">\n                <div className=\"mt-4 border-b-[1px] sm:w-1/2 sm:border-b-0 sm:border-r-[1px]\">\n                  <p className=\"font-montserrat text-base leading-[20px]\">\n                    Your Metabolic Age\n                  </p>\n                  <p className=\"font-montserrat text-4xl leading-[49px] text-primary\">\n                    {metabolicAge}\n                  </p>\n                </div>\n\n                <div className=\"mt-4 flex flex-col sm:w-1/2 sm:items-center \">\n                  <div>\n                    <p className=\"font-montserrat text-base leading-[20px]\">\n                      Your Vitality Score\n                    </p>\n                    <p className=\"font-montserrat text-4xl leading-[49px] text-third\">\n                      {scoreStyle}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <button\n                className=\"mt-10 mr-4 rounded-3xl border-[1px] bg-black py-3 px-6 text-center font-montserrat text-base font-bold leading-[24px] text-secondary md:px-12 md:text-xl\"\n                onClick={() => props.deleteEntryFunc()}\n              >\n                Delete\n              </button>\n\n              <button\n                className=\"mt-10 rounded-3xl border-[1px] py-3 px-6 text-center font-montserrat text-base font-bold leading-[24px] text-black md:px-12 md:text-xl\"\n                onClick={props.close}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step2.jsx",["173","174","175","176","177","178","179","180"],[],"import React from \"react\";\n// get the calendar icon\nimport { calendar } from \"../Base/SVG\";\n\nexport default function Step2({\n  form,\n  setCheckbox,\n  nextTab,\n  prevTab,\n  setInput,\n  type = \"1\",\n}) {\n  // the constant is only valid if age and sex are not empty and form race is equal to something\n  const isValid =\n    form.age !== \"\" &&\n    form.sex !== \"\" &&\n    (form.asian !== false ||\n      form.pacIsl !== false ||\n      form.whiteOrCaucas !== false ||\n      form.blackAfrAmer !== false ||\n      form.hispLat !== false ||\n      form.natAmerAlas !== false ||\n      form.multBirac !== false ||\n      form.notListed !== false ||\n      form.extraRace !== \"\");\n\n  return (\n    <>\n      <div\n        className={`step second ${\n          type == \"1\" ? \"\" : \"!border-0 before:content-none\"\n        } `}\n      >\n        {type == \"1\" ? (\n          <>\n            <h2>Tell Us About Yourself</h2>\n            <h3 className=\"light\">\n              Your age, sex at birth, and ethnicity contribute to the baseline\n              data for the creation of your Vitality Score.\n            </h3>\n          </>\n        ) : null}\n\n        <div className=\"form\">\n          <h3 className=\"med\">How old are you?</h3>\n          <div className=\"input__calendar\">\n            <input\n              type=\"number\"\n              className=\"input\"\n              placeholder=\"40\"\n              onChange={setInput(\"age\")}\n              value={form.age}\n            />\n          </div>\n          <h3 className=\"med\">Sex assigned at birth:</h3>\n          <div className=\"input__radio\">\n            <div className=\"input__radio-item\">\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value=\"Female\"\n                onClick={setInput(\"sex\")}\n                checked={form.sex == \"Female\" ? true : false}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Female</span>\n            </div>\n            <div className=\"input__radio-item\">\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value=\"Male\"\n                onClick={setInput(\"sex\")}\n                checked={form.sex == \"Male\" ? true : false}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Male</span>\n            </div>\n            <div className=\"input__radio-item\">\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value=\"Intersex\"\n                onClick={setInput(\"sex\")}\n                checked={form.sex == \"Intersex\" ? true : false}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Intersex</span>\n            </div>\n            <div className=\"input__radio-item\">\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value=\"Prefer not to disclose\"\n                onClick={setInput(\"sex\")}\n                checked={form.sex == \"Prefer not to disclose\" ? true : false}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Prefer not to disclose</span>\n            </div>\n          </div>\n          <h3 className=\"med\">\n            Which of the following best describes you? Select all that apply.{\" \"}\n          </h3>\n          <div className=\"input__checkbox\">\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"asian\")}\n                checked={form.asian}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Asian</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"pacIsl\")}\n                checked={form.pacIsl}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Pacific Islander</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"whiteOrCaucas\")}\n                checked={form.whiteOrCaucas}\n              />\n              <label htmlFor=\"\"></label>\n              <span>White or Caucasian</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"blackAfrAmer\")}\n                checked={form.blackAfrAmer}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Black of African American</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"hispLat\")}\n                checked={form.hispLat}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Hispanic of Latino</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"natAmerAlas\")}\n                checked={form.natAmerAlas}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Native American or Native Alaskan</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"multBirac\")}\n                checked={form.multBirac}\n              />\n              <label htmlFor=\"\"></label>\n              <span>Multiracial or Biracial</span>\n            </div>\n            <div className=\"input__checkbox-item\">\n              <input\n                type=\"checkbox\"\n                onClick={setCheckbox(\"notListed\")}\n                checked={form.notListed}\n              />\n              <label htmlFor=\"\"></label>\n              <span>\n                A race/ethnicity not listed here (please specify below)\n              </span>\n            </div>\n            <input\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Unspecified race/ethnicity\"\n              onChange={setInput(\"extraRace\")}\n              value={form.extraRace}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-10 flex flex-col items-center\">\n        {type == \"1\" ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button primary !m-0\"\n              disabled={!isValid}\n              onClick={nextTab}\n            >\n              Continue\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button primary clearDT back !m-0\"\n              onClick={prevTab}\n            >\n              Back\n            </button>\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step1.jsx",["181","182","183"],[],"import React, { useEffect, useState } from \"react\";\nimport { setItem, getItem, deleteItem, clearls } from \"../../localStore\";\n\nexport default function Step1({ form, nextTab, jumpTab }) {\n  const [isFormSave, setIsFormSave] = useState(false);\n\n  useEffect(() => {\n    // check whether we have form data in localstorage or not\n    if (getItem(\"forms\")) {\n      setIsFormSave(true);\n    }\n  }, []);\n\n  const vitalityScoreHistory = () => {\n    if (isFormSave) {\n      // jump to vitality score history because we have old form data from localstorage\n      jumpTab(4);\n    }\n  };\n  return (\n    <>\n      <div className=\"step first \">\n        <h2>Welcome to the Vitality Score Calculator</h2>\n        <p className=\"\">\n          Your Vitality Score indicates your current metabolic health status\n          compared to other adults in the US population.\n          <br />\n          <br />A score of 50 suggests that you have an average risk for\n          developing metabolic health problems in the future. A hihger score\n          indicates better overall metabolic health anda lower risk of\n          developing future disease. The good news is that healthy lifestyle\n          changes and smart supplementation can improve your Vitality Score over\n          time.\n        </p>\n        <br />\n        <span className=\"finePrint\">\n          Vitality Score is based on algorithms developed by MetCalc.org. Ranges\n          are based on NHAINES data gathered by CDC\n        </span>\n      </div>\n\n      <div className=\"mt-10 flex flex-col items-center\">\n        <div className=\"mt-10 flex flex-col items-center\">\n          <button\n            type=\"button\"\n            className=\"button primary mirror sm:!w-none !m-0 !w-full !border-[1px] !text-[16px] sm:!text-[20px]\"\n            onClick={nextTab}\n          >\n            Continue\n          </button>\n          {isFormSave ? (\n            <button\n              type=\"button\"\n              className=\"button primary mirror sm:!w-none !m-0 !w-full !border-[1px] !border-black !bg-transparent !text-[16px] !text-black hover:!bg-primary hover:!text-white sm:!text-[20px]\"\n              onClick={vitalityScoreHistory}\n            >\n              See Your Vitality Score History\n            </button>\n          ) : null}\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step3.jsx",["184","185","186","187","188","189","190","191"],[],"import React, { useState } from \"react\";\n\nimport CustomSelect from \"./CustomSelect\";\nimport RangeSlider from \"./RangeSlider/RangeSlider\";\nimport { RangeSliderModul } from \"./RangeSlider/RangeSliderModul\";\n\nconst heightList = [\n  { id: \"Inches\", value: \"Inches \", unit: \"(in)\" },\n  { id: \"Centimeter\", value: \"Centimeter \", unit: \"(cm)\" },\n  { id: \"Meter\", value: \"Meter \", unit: \"(m)\" },\n];\n\nconst weightList = [\n  { id: \"Pounds\", value: \"Pounds \", unit: \"(lbs)\" },\n  { id: \"Kilograms\", value: \"Kilograms \", unit: \"(kg)\" },\n];\n\n// the main export of this jsx file\nexport default function Step3({\n  nextTab,\n  prevTab,\n  setInput,\n  updateForm,\n  form,\n  type = \"1\",\n}) {\n  const [select, setSelect] = useState();\n  const setHeightUnit = (data) => updateForm({ heightUnit: data });\n  const isValid =\n    form.feet !== \"\" &&\n    form.inches !== \"\" &&\n    form.waist !== \"\" &&\n    form.weight !== \"\" &&\n    form.pressure !== \"\";\n  const changeMedium = (item) => {\n    setHeightUnit(item.unit);\n    setSelect(item.id);\n  };\n\n  return (\n    <>\n      <div\n        className={`step third ${\n          type == \"1\" ? \"\" : \"!border-[0px] before:content-none\"\n        } `}\n      >\n        {type == \"1\" ? (\n          <>\n            {\" \"}\n            <h2>Measurements</h2>\n            <h3 className=\"light\">\n              Your height and weight determine your BMI or Body Mass Index. BMI\n              is a person’s weight in kilograms (or pounds) divided by the\n              square of height in meters (or feet). While BMI doesn’t measure\n              body fat or lean tissue directly, a high BMI is associated with an\n              increased risk for metabolic health problems.\n            </h3>\n          </>\n        ) : null}\n        <div className=\"form\">\n          <h3 className=\"med\">Height</h3>\n          <h3 className=\"med\">Feet</h3>\n          <div className=\"input__measure\">\n            <input\n              type=\"number\"\n              className=\"input\"\n              placeholder=\"ex: 5\"\n              onChange={setInput(\"feet\")}\n              value={form.feet}\n            />\n          </div>\n          <h3 className=\"med\">Inches</h3>\n          <div className=\"input__measure\">\n            <input\n              type=\"number\"\n              className=\"input\"\n              placeholder=\"ex: 7\"\n              onChange={setInput(\"inches\")}\n              value={form.inches}\n            />\n          </div>\n          <h3 className=\"med\">Weight (lbs)</h3>\n          <div className=\"input__measure\">\n            <input\n              type=\"number\"\n              className=\"input\"\n              placeholder=\"ex: 190\"\n              onChange={setInput(\"weight\")}\n              value={form.weight}\n            />\n          </div>\n          <h3 className=\"med\">Waist Circumference (in)</h3>\n          <h3 className=\"light\">\n            To correctly measure wasit circumference:\n            <ul className=\"myList\">\n              <li>\n                Stand and place a tape measure around your waist, just above\n                your hipbones\n              </li>\n              <li>Make sure tape is horizontal around the waist</li>\n              <li>\n                Keep the tape snug around the waist, but not compressing the\n                skin\n              </li>\n              <li>Measure your waist just after you breathe out</li>\n            </ul>\n          </h3>\n\n          <div className=\"input__measure\">\n            <input\n              type=\"number\"\n              className=\"input\"\n              placeholder=\"ex: 30\"\n              onChange={setInput(\"waist\")}\n              value={form.waist}\n            />\n          </div>\n          <h3 className=\"med\">Systolic Blood Pressure (mmHg)</h3>\n          <h3 className=\"light\">\n            Blood Pressure consists of two numbers, systolic (top number) and\n            diastolic (bottom number. Blood pressure greater than 130/80 mm is\n            considered high. People with blood pressure over 140/90 should be\n            seen by their healthcare provider. If your blood pressure is over\n            170 systolic, you should seek medical attention immediately.\n          </h3>\n\n          <RangeSlider\n            {...RangeSliderModul[0]}\n            value={form.pressure}\n            onChange={setInput(\"pressure\")}\n          />\n\n          <RangeSlider\n            {...RangeSliderModul[5]}\n            value={form.diastolicBP}\n            onChange={setInput(\"diastolicBP\")}\n          />\n        </div>\n      </div>\n\n      {type == \"1\" ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"button primary\"\n            disabled={!isValid}\n            onClick={nextTab}\n          >\n            Continue\n          </button>\n          <button\n            type=\"button\"\n            className=\"button primary clearDT back\"\n            onClick={prevTab}\n          >\n            Back\n          </button>\n        </>\n      ) : null}\n    </>\n  );\n}\n",[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step4.jsx",["192","193","194","195","196"],[],"import React from \"react\";\nimport RangeSlider from \"./RangeSlider/RangeSlider\";\nimport { RangeSliderModul } from \"./RangeSlider/RangeSliderModul\";\n\nexport default function Step4({\n  form,\n  nextTab,\n  prevTab,\n  setInput,\n  setInputDirect,\n  setCheckbox,\n  type = \"1\",\n}) {\n  const isValid = form.hdl !== \"\" && form.trigl !== \"\" && form.glucose !== \"\";\n\n  return (\n    <>\n      <div\n        style={{ border: type == \"1\" ? \"\" : 0 }}\n        className={`step fourth ${\n          type == \"1\" ? \"\" : \"!border-0 before:content-none max-[540px]:!mt-10\"\n        } `}\n      >\n        {type == \"1\" ? (\n          <>\n            {\" \"}\n            <h2>Lab Values</h2>\n            <h3 className=\"light\">\n              Certain lab values help establish your risk for cardiovascular\n              disease. If you know your numbers, please enter them below. If\n              not, feel free to estimate using the numbers within the normal\n              range.\n            </h3>\n          </>\n        ) : null}\n\n        <div className=\"form\">\n          <div className=\"form__list\">\n            <h3 className=\"light\">\n              <span> HDL (mg/dL) </span>\n              HDL is high-density lipoprotein, also known as “good” cholesterol.\n              It absorbs cholesterol and carries it back to the liver, which\n              then flushes it from the body. (NOTE: This is CDC definition).\n              High good cholesterol is generally associated with better\n              metabolic health.\n            </h3>\n          </div>\n          <div className=\"form__range\">\n            <RangeSlider\n              {...RangeSliderModul[1]}\n              value={form.hdl}\n              onChange={setInput(\"hdl\")}\n            />\n          </div>\n          <div className=\"form__list\">\n            <h3 className=\"light\">\n              <span>Triglycerides (mg/dL)</span>\n              Triglycerides are a type of fat found in your blood. Your body\n              releases triglycerides for energy between meals. (NOTE: This is\n              Mayo Clinic Definition). Higher triglycerides are associated with\n              an increased risk for metabolic health problems.\n            </h3>\n          </div>\n          <div className=\"form__range\">\n            <RangeSlider\n              {...RangeSliderModul[2]}\n              value={form.trigl}\n              onChange={setInput(\"trigl\")}\n            />\n          </div>\n          <div className=\"form__list\">\n            <h3 className=\"light\">\n              <span>Fasting Blood Sugar</span>\n              This is your blood glucose after a minimum fast of 10 hours.\n              Values below 100 are considered normal. If your number is above\n              120 and you don’t have diabetes, you should check with your\n              healthcare provider.\n            </h3>\n          </div>\n          <div className=\"form__range\">\n            <RangeSlider\n              {...RangeSliderModul[3]}\n              value={form.glucose}\n              // update the glucose value and the a1c value\n              onChange={(event) =>\n                handleSugarChangeGlucoseToA1C(event, setInputDirect)\n              }\n            />\n          </div>\n\n          <div className=\"form__list\">\n            <h3 className=\"light\">\n              <span>A1C Glycated Hemoglobin</span>\n              Glycated hemoglobin is a measure of your average blood sugar over\n              the past 2-3 months. A1C is a percentage of hemoglobin that is\n              glycated. A normal A1C is less than 5.7%. A1C is a good measure of\n              how well your diabetes is controlled. If your A1C is above 6.5%,\n              you should check with your healthcare provider.\n            </h3>\n          </div>\n          <div className=\"form__range\">\n            <RangeSlider\n              {...RangeSliderModul[7]}\n              value={form.a1c}\n              unit=\"%\"\n              stepAmount=\"0.1\"\n              // update the glucose value and the a1c value\n              onChange={(event) =>\n                handleSugarChangeA1CToGlucose(event, setInputDirect)\n              }\n            />\n          </div>\n          <h3 className=\"med\">\n            Check this box if you prefer to use A1C in the calculations instead\n            of Fasting Blood Sugar.{\" \"}\n          </h3>\n        </div>\n      </div>\n\n      {type == \"1\" ? (\n        <>\n          <button\n            type=\"button\"\n            className=\"button primary\"\n            disabled={!isValid}\n            onClick={nextTab}\n          >\n            Continue\n          </button>\n          <button\n            type=\"button\"\n            className=\"button primary clearDT back\"\n            onClick={prevTab}\n          >\n            Back\n          </button>\n        </>\n      ) : null}\n    </>\n  );\n}\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n// make a function that will take in A1C value and convert it to glucose then update both corresponding form values\nfunction handleSugarChangeA1CToGlucose(evt, setInputDirect) {\n  let sugarNumber = 0;\n  if (evt.target.value === 0) {\n    sugarNumber = parseInt(evt.target.value);\n  } else {\n    sugarNumber = parseInt(parseFloat(evt.target.value) * 28.7 - 46.7);\n  }\n  setInputDirect(\"a1c\", evt.target.value, \"glucose\", sugarNumber);\n}\n\n// make a function that will take in glucose integer value and convert it to a1c percent by then update both corresponding form values\nfunction handleSugarChangeGlucoseToA1C(evt, setInputDirect) {\n  let sugarNumber = 0;\n  if (evt.target.value === 0) {\n    sugarNumber = parseInt(evt.target.value);\n  } else {\n    sugarNumber = parseFloat((parseInt(evt.target.value) + 46.7) / 28.7);\n  }\n  setInputDirect(\"glucose\", evt.target.value, \"a1c\", sugarNumber.toFixed(1));\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/Step5.jsx",["197","198"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport RangeSlider from \"./RangeSlider/RangeSlider\";\nimport CircleModel from \"./CircleModel/CircleModel\";\nimport { RangeSliderModul } from \"./RangeSlider/RangeSliderModul\";\nimport VitalityScore from \"./VitalityScore\";\nimport MetaCalc from \"./CircleModel/MetaCalc.jsx\";\nimport VitalityScoreGraph from \"../VitalityHistory/VitalityScoreGraph\";\nimport { getMetaAge } from \"../../utils\";\n\nexport default function Step5({\n  form,\n  setInput,\n  setInputDirect,\n  nextTab,\n  saveYourGoals,\n}) {\n  const [metaAge, setMetaAge] = useState(0);\n  const [shareResultsPopup, setShareResultsPopup] = useState(false);\n  useEffect(() => {\n    const metaAgeData = getMetaAge({ ...form });\n    setMetaAge(metaAgeData);\n  });\n\n  return (\n    <>\n      <div className=\"step__outer\">\n        <VitalityScore\n          form={form}\n          score={0}\n          title=\"Your Vitality Score Is:\"\n          image=\"/images/graph.png\"\n          clName=\"vitality\"\n        />\n\n        <div className=\"relative flex flex-row flex-nowrap  sm:mt-16 sm:border-[1px] sm:border-l-[15px] sm:border-l-primary \">\n          <div\n            className={`flex w-full grow flex-col-reverse flex-nowrap justify-between py-10 px-6 sm:pl-6 md:flex-row md:pl-20`}\n          >\n            <div className=\"flex flex-row justify-between md:flex-col md:gap-10\">\n              <div className=\" md:border-0\">\n                <h3 className=\"font-montserrat text-base leading-[39px] text-primary md:text-3xl\">\n                  Your Metabolic Age{\" \"}\n                </h3>\n\n                <p className=\"md:text-normal font-montserrat text-[40px] font-bold leading-[110%] text-primary md:text-[80px] md:font-normal md:leading-[98px] \">\n                  {metaAge}\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"font-montserrat text-base leading-[39px] text-[#7C5D7A] md:text-3xl\">\n                  Your Calendar Age{\" \"}\n                </h3>\n                <p className=\"md:text-normal font-montserrat text-[40px] font-bold leading-[110%] text-[#7C5D7A] md:text-[80px] md:font-normal md:leading-[98px]\">\n                  {form.age}\n                </p>\n              </div>\n            </div>\n            <div className=\"doterraColumn flex items-center\">\n              {/*\n              <div className=\"relative mx-auto h-[200px] min-w-[200px] max-w-[300px] grow sm:block\">\n                <VitalityScoreGraph value1={metaAge} value2={form.age} />\n\n                <div className=\"absolute right-0 left-0 top-0 bottom-0 flex items-center justify-center\">\n                  <p className=\"text-xl font-bold\">\n                    <span className=\"text-primary\">{metaAge}</span>/\n                    <span className=\"text-third\">{form.age}</span>\n                  </p>\n                </div>\n              </div>\n            */}\n\n              <div className=\"mx-auto\">\n                <CircleModel metabolicAge={metaAge} actualAge={form.age} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {shareResultsPopup ? (\n          <div className=\"fixed top-0 left-0 bottom-0 right-0 z-10 m-7\">\n            <div\n              className=\"fixed top-0 left-0 bottom-0 right-0 -z-[1] flex items-center justify-center bg-black opacity-[0.65]\"\n              onClick={() => setShareResultsPopup(false)}\n            ></div>\n\n            <div className=\"relative mx-auto h-full max-w-[900px] overflow-auto bg-secondary py-10 px-20\">\n              <VitalityScore\n                form={form}\n                score={0}\n                title=\"Your Vitality Score Is:\"\n                image=\"/images/graph.png\"\n                clName=\"vitality\"\n              />\n\n              <div className=\"relative flex flex-row flex-nowrap  sm:mt-16 sm:border-[1px] sm:border-l-[15px] sm:border-l-primary \">\n                <div\n                  className={`flex w-full grow flex-col-reverse flex-nowrap justify-between py-10 px-6 sm:pl-6 md:flex-row md:pl-20`}\n                >\n                  <div className=\"flex flex-row justify-between md:flex-col md:gap-10\">\n                    <div className=\" md:border-0\">\n                      <h3 className=\"font-montserrat text-base leading-[39px] text-primary md:text-3xl\">\n                        Your Metabolic Age{\" \"}\n                      </h3>\n\n                      <p className=\"font-montserrat text-[40px] font-bold leading-[110%] text-primary md:text-[80px] md:font-normal md:leading-[98px] \">\n                        {metaAge}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-montserrat text-base leading-[39px] text-[#7C5D7A] md:text-3xl\">\n                        Your Calendar Age{\" \"}\n                      </h3>\n                      <p className=\"font-montserrat text-[40px] font-bold leading-[110%] text-[#7C5D7A] md:text-[80px] md:font-normal md:leading-[98px] \">\n                        {form.age}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"doterraColumn flex items-center\">\n                    <div className=\"relative mx-auto h-[200px] min-w-[200px] max-w-[300px] grow sm:block\">\n                      <VitalityScoreGraph value1={metaAge} value2={form.age} />\n\n                      <div className=\"absolute right-0 left-0 top-0 bottom-0 flex items-center justify-center\">\n                        <p className=\"text-xl font-bold\">\n                          <span className=\"text-primary\">{metaAge}</span>/\n                          <span className=\"text-third\">{form.age}</span>\n                        </p>\n                      </div>\n                    </div>\n\n                    {/*<CircleModel\n                      metabolicAge={metaAge}\n                      actualAge={form.age}\n                    />*/}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        <div className=\"mt-[60px]\">\n          <button\n            type=\"submit\"\n            onClick={nextTab}\n            className=\"button primary mirror !w-full !max-w-[375px] border-[1px]\"\n            style={{\n              display: \"flex\",\n              gridGap: \"10px\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            View History\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button primary clearDT mirror !mb-[60px]  !w-full !max-w-[375px]\"\n            style={{\n              display: \"flex\",\n              gridGap: \"10px\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            onClick={() => setShareResultsPopup(true)}\n          >\n            Share Your Results{\" \"}\n            <img\n              className=\"shareIcon\"\n              src={process.env.PUBLIC_URL + \"/images/share.svg\"}\n              alt=\"share-icon\"\n              style={{ top: 0 }}\n            />\n          </button>\n        </div>\n\n        <div className=\"step\">\n          <h2>What Your Results Mean </h2>\n          <h3 className=\"light\">\n            Your Vitality Score indicates your current metabolic health status\n            compared to other adults in the US population.\n            <br />\n            <br />A score of 50 suggests that you are of average health and have\n            an average risk for developing metabolic health problems in the\n            future. The higher your score, suggests better overall metabolic\n            health. The good news is that healthy lifestyle changes and smart\n            supplementation can improve your Vitality Score over time.\n          </h3>\n        </div>\n\n        <div className=\"step fourth\">\n          <VitalityScore\n            score={1}\n            form={form}\n            title=\"Your Vitality Score Could Be\"\n            image=\"/images/graph2.png\"\n            clName=\"vitality new\"\n          />\n          <h3 className=\"med\">Weight</h3>\n          <RangeSlider\n            {...RangeSliderModul[4]}\n            value={form.newWeight}\n            onChange={setInput(\"newWeight\")}\n            unit=\" lbs.\"\n          />\n          <h3 className=\"med\">Waist</h3>\n          <RangeSlider\n            {...RangeSliderModul[6]}\n            value={form.newWaist}\n            onChange={setInput(\"newWaist\")}\n            unit=\" in.\"\n          />\n          <h3 className=\"med\">Systolic Blood Pressure (mmHg)</h3>\n          <RangeSlider\n            {...RangeSliderModul[0]}\n            value={form.newPressure}\n            onChange={setInput(\"newPressure\")}\n            clName=\"rangeSlider new pressure\"\n            unit=\" mmHG\"\n          />\n          <h3 className=\"med\">Diastolic Blood Pressure (mmHg)</h3>\n          <RangeSlider\n            {...RangeSliderModul[5]}\n            value={form.newDiastolicBP}\n            onChange={setInput(\"newDiastolicBP\")}\n            clName=\"rangeSlider new diastolicBP\"\n            unit=\" mmHG\"\n          />\n          <h3 className=\"med\">HDL (mg/dL)</h3>\n          <RangeSlider\n            {...RangeSliderModul[1]}\n            value={form.newHdl}\n            onChange={setInput(\"newHdl\")}\n            unit=\" mg/dL\"\n            clName=\"rangeSlider new hdl\"\n          />\n          <h3 className=\"med\">Triglycerides (mg/dL)</h3>\n          <RangeSlider\n            {...RangeSliderModul[2]}\n            value={form.newTrigl}\n            onChange={setInput(\"newTrigl\")}\n            unit=\" mg/dL\"\n            clName=\"rangeSlider new trigl\"\n          />\n          <h3 className=\"med\">Fasting Glucose (mg/dL)</h3>\n          <RangeSlider\n            {...RangeSliderModul[3]}\n            value={form.newGlucose}\n            onChange={(event) =>\n              handleSugarChangeGlucoseToA1C(event, setInputDirect)\n            }\n            unit=\" mg/dL\"\n            clName=\"rangeSlider new glucose\"\n          />\n          <h3 className=\"med\">A1C Glycated Hemoglobin </h3>\n          <RangeSlider\n            {...RangeSliderModul[7]}\n            value={form.newA1c}\n            onChange={(event) =>\n              handleSugarChangeA1CToGlucose(event, setInputDirect)\n            }\n            unit=\"%\"\n            stepAmount=\"0.1\"\n            clName=\"rangeSlider new a1c\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"button primary mirror !w-full !max-w-[375px] border-[1px]\"\n          onClick={() => saveYourGoals()}\n        >\n          Save Your Goals\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button primary clearDT mirror !w-full !max-w-[375px]\"\n          style={{\n            display: \"flex\",\n            gridGap: \"10px\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <span>Share Your Goals</span>{\" \"}\n          <img\n            className=\"shareIcon\"\n            src={process.env.PUBLIC_URL + \"/images/share.svg\"}\n            style={{ top: 0 }}\n            alt=\"share-icon\"\n          />\n        </button>\n        <div className=\"manualGap\" style={{ padding: \"20px\" }}></div>\n\n        <div className=\"step add\">\n          <div className=\"step__image\">\n            <img\n              src={process.env.PUBLIC_URL + \"/images/powerme.png\"}\n              alt=\"powerme\"\n            />\n          </div>\n          <div className=\"step__content\">\n            <h2>To Learn More</h2>\n            <h3 className=\"light\">\n              To better understand your health,{\" \"}\n              <a href=\"https://apps.powerme.health/shop\">\n                purchase a PowerMe Metabolic Health Kit\n              </a>\n            </h3>\n            <h3 className=\"light\">\n              To find resources on bettering your health outcomes,{\" \"}\n              <a href=\"http://powermeacademy.flywheelsites.com/\">\n                visit the PowerMe Academy\n              </a>\n            </h3>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n// make a function that will take in A1C value and convert it to glucose then update both corresponding form values\nfunction handleSugarChangeA1CToGlucose(evt, setInputDirect) {\n  let sugarNumber = 0;\n  if (evt.target.value === 0) {\n    sugarNumber = parseInt(evt.target.value);\n  } else {\n    sugarNumber = parseInt(parseFloat(evt.target.value) * 28.7 - 46.7);\n  }\n  setInputDirect(\"newA1c\", evt.target.value, \"newGlucose\", sugarNumber);\n}\n\n// make a function that will take in glucose integer value and convert it to a1c percent by then update both corresponding form values\nfunction handleSugarChangeGlucoseToA1C(evt, setInputDirect) {\n  let sugarNumber = 0;\n  if (evt.target.value === 0) {\n    sugarNumber = parseInt(evt.target.value);\n  } else {\n    sugarNumber = parseFloat((parseInt(evt.target.value) + 46.7) / 28.7);\n  }\n  setInputDirect(\n    \"newGlucose\",\n    evt.target.value,\n    \"newA1c\",\n    sugarNumber.toFixed(1)\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/localStore/index.js",["199","200"],[],"function setItem(key, value) {\n  if (key == null || key == \"\" || key == typeof undefined) {\n    return;\n  }\n\n  if (value == null || value == \"\" || value == typeof undefined) {\n    return;\n  }\n\n  const jsonValue = JSON.stringify(value);\n  localStorage.setItem(key, jsonValue);\n}\n\nfunction getItem(key) {\n  const jsonValue = localStorage.getItem(key);\n  const value = JSON.parse(jsonValue);\n  return value;\n}\n\nfunction deleteItem(key) {\n  localStorage.removeItem(key);\n}\n\nfunction clearls(key) {\n  localStorage.clear();\n}\n\nexport { getItem, setItem, deleteItem, clearls };\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityScoreGraph.jsx",["201"],[],"import React, { PureComponent } from \"react\";\nimport { PieChart, Pie, Sector, Cell, ResponsiveContainer } from \"recharts\";\n\nexport default class VitalityScoreGraph extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value2: parseInt(this.props.value2),\n      value1: parseInt(this.props.value1),\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      value2: parseInt(this.props.value2),\n      value1: parseInt(this.props.value1),\n    });\n  }\n  render() {\n    const data01 = [\n      { name: \"Group A\", value: parseInt(this.props.value2), fill: \"#A3C2C4\" },\n      {\n        name: \"Group B\",\n        value: 100 - parseInt(this.props.value2),\n        fill: \"transparent\",\n      },\n    ];\n    const data02 = [\n      { name: \"A1\", value: parseInt(this.props.value1), fill: \"#545A88\" },\n      {\n        name: \"A2\",\n        value: 100 - parseInt(this.props.value1),\n        fill: \"transparent\",\n      },\n    ];\n\n    return (\n      <ResponsiveContainer\n        width=\"100%\"\n        height=\"100%\"\n        className=\"h-[300px] w-[300px] sm:h-[400px]\"\n      >\n        <PieChart width={200} height=\"100%\" className=\"h-[300px] sm:h-[400px]\">\n          <Pie\n            data={data01}\n            dataKey=\"value\"\n            cx=\"50%\"\n            cy=\"50%\"\n            radius={55}\n            innerRadius={55}\n            outerRadius={55}\n            startAngle={90}\n            endAngle={-500}\n            stroke=\"#000000\"\n          >\n            {data01.map((entry, index) => (\n              <Cell key={`cell-center-0`} fill={entry.fill} />\n            ))}\n          </Pie>\n\n          <Pie\n            data={data01}\n            dataKey=\"value\"\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={50}\n            outerRadius={60}\n            startAngle={90}\n            endAngle={-500}\n            paddingAngle={0}\n            stroke=\"0\"\n          >\n            {data01.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.fill} />\n            ))}\n          </Pie>\n\n          <Pie\n            data={data02}\n            dataKey=\"value\"\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={75}\n            outerRadius={75}\n            startAngle={90}\n            endAngle={-500}\n            stroke=\"#000000\"\n          >\n            {data02.map((entry, index) => (\n              <Cell key={`cell-center-1`} fill={entry.fill} />\n            ))}\n          </Pie>\n\n          <Pie\n            data={data02}\n            dataKey=\"value\"\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={70}\n            outerRadius={80}\n            startAngle={90}\n            endAngle={-500}\n            stroke=\"0\"\n          >\n            {data02.map((entry, index) => (\n              <Cell key={`cell-${index + 1}`} fill={entry.fill} />\n            ))}\n          </Pie>\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CircleModel/MetaCalc.jsx",["202","203"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function MetaCalc(\n{\n    age,\n    sex,\n    race,\n    feet,\n    inches,\n    heightUnit,\n    weight,\n    weightUnit,\n    pressure,\n    hdl,\n    trigl,\n    glucose,\n    newWeight,\n    newPressure,\n    newHdl,\n    newTrigl,\n    newGlucose,\n    setScoreStyle,\n    score,\n    a1c,\n    newA1c,\n    a1cPref,\n    newA1cPref,\n    diastolicBP, \n    newDiastolicBP,\n    waist,\n    newWaist,\n    typeFlag,\n}) \n{\n    const [metaAgeData, setMetaAgeData] = useState(0);\n    useEffect(() => \n    {\n        let baseNum = -82.688;\n        let wcNum = 0.779;\n        let cmConv = 2.54;\n        let mapperNumTwo = 0.227;\n        let fbsNum = 0.269;\n        let tgNum = 0.085;\n        let hdlNum = 0.481;\n        let ageNum = 0.538;\n        let mapperNumOne = 0.3333;\n\n        if(typeFlag === \"type1\")\n        {\n            let mappedVar = parseFloat(newDiastolicBP) + parseFloat(mapperNumOne*(newPressure -  newDiastolicBP));\n            let metaAgeTempVar = baseNum+(wcNum*(newWaist*cmConv))+(mapperNumTwo*mappedVar)+(fbsNum*newGlucose)+(tgNum*newTrigl)-(hdlNum*newHdl)+(ageNum*age);\n            setMetaAgeData(metaAgeTempVar.toFixed(0));\n        }\n        else\n        {\n            let mappedVar = parseFloat(diastolicBP) + parseFloat(mapperNumOne*(pressure -  diastolicBP));\n            let metaAgeTempVar = baseNum+(wcNum*(waist*cmConv))+(mapperNumTwo*mappedVar)+(fbsNum*glucose)+(tgNum*trigl)-(hdlNum*hdl)+(ageNum*age);\n            setMetaAgeData(metaAgeTempVar.toFixed(0));\n        }\n    });\n    return metaAgeData;\n}","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/utils/index.jsx",["204"],[],"function getScorePercentile({\n  age,\n  sex,\n  race,\n  feet,\n  inches,\n  heightUnit,\n  weight,\n  weightUnit,\n  pressure,\n  hdl,\n  trigl,\n  glucose,\n  newWeight,\n  newPressure,\n  newHdl,\n  newTrigl,\n  newGlucose,\n  score,\n  a1c,\n  newA1c,\n  a1cPref,\n  newA1cPref,\n  diastolicBP,\n  newDiastolicBP,\n}) {\n  let bmi, zNumber, percentile, miscData;\n\n  bmi = 25;\n  zNumber = 20;\n  percentile = 20;\n  miscData = 100;\n\n  if (score === 0) {\n    let sugarNumber = 0;\n    sugarNumber = parseInt(glucose);\n\n    let realHeight = feet * 12 + parseInt(inches);\n    let heightSquared = realHeight * realHeight;\n    let weightStarter = weight * 703;\n\n    miscData = heightSquared;\n    bmi = weightStarter / heightSquared;\n    if (sex === \"Male\") {\n      zNumber =\n        -4.8316 +\n        0.0315 * bmi -\n        0.0272 * parseInt(hdl) +\n        0.0044 * parseInt(pressure) +\n        0.8018 * Math.log(parseInt(trigl)) +\n        0.0101 * sugarNumber;\n    } else {\n      zNumber =\n        -6.5231 +\n        0.0523 * bmi -\n        0.0138 * parseInt(hdl) +\n        0.0081 * parseInt(pressure) +\n        0.6125 * Math.log(parseInt(trigl)) +\n        0.0208 * sugarNumber;\n    }\n    percentile =\n      100 *\n      (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber)));\n  } else {\n    let sugarNumber = 0;\n    if (newA1cPref === 0) {\n      sugarNumber = parseInt(newGlucose);\n    } else {\n      sugarNumber = parseInt(parseFloat(newA1c) * 28.7 - 46.7);\n    }\n\n    let realHeight = feet * 12 + parseInt(inches);\n    let heightSquared = realHeight * realHeight;\n    let weightStarter = newWeight * 703;\n    miscData = heightSquared;\n    bmi = weightStarter / heightSquared;\n    if (sex === \"Male\") {\n      zNumber =\n        -4.8316 +\n        0.0315 * bmi -\n        0.0272 * parseInt(newHdl) +\n        0.0044 * parseInt(newPressure) +\n        0.8018 * Math.log(parseInt(newTrigl)) +\n        0.0101 * sugarNumber;\n    } else {\n      zNumber =\n        -6.5231 +\n        0.0523 * bmi -\n        0.0138 * parseInt(newHdl) +\n        0.0081 * parseInt(newPressure) +\n        0.6125 * Math.log(parseInt(newTrigl)) +\n        0.0208 * sugarNumber;\n    }\n    percentile =\n      100 *\n      (1 / (1 + Math.exp(-0.07056 * Math.pow(zNumber, 3) - 1.5976 * zNumber)));\n  }\n\n  return percentile;\n}\n\nfunction getVitalityScore(props) {\n  const percentile = getScorePercentile(props);\n  return ((percentile - 100) * -1).toFixed(0);\n}\n\nfunction getMetaAge({\n  age,\n  sex,\n  race,\n  feet,\n  inches,\n  heightUnit,\n  weight,\n  weightUnit,\n  pressure,\n  hdl,\n  trigl,\n  glucose,\n  newWeight,\n  newPressure,\n  newHdl,\n  newTrigl,\n  newGlucose,\n  setScoreStyle,\n  score,\n  a1c,\n  newA1c,\n  a1cPref,\n  newA1cPref,\n  diastolicBP,\n  newDiastolicBP,\n  waist,\n  newWaist,\n  typeFlag,\n}) {\n  let metaAgeData = 0;\n  let baseNum = -82.688;\n  let wcNum = 0.779;\n  let cmConv = 2.54;\n  let mapperNumTwo = 0.227;\n  let fbsNum = 0.269;\n  let tgNum = 0.085;\n  let hdlNum = 0.481;\n  let ageNum = 0.538;\n  let mapperNumOne = 0.3333;\n\n  if (typeFlag === \"type1\") {\n    let mappedVar =\n      parseFloat(newDiastolicBP) +\n      parseFloat(mapperNumOne * (newPressure - newDiastolicBP));\n    let metaAgeTempVar =\n      baseNum +\n      wcNum * (newWaist * cmConv) +\n      mapperNumTwo * mappedVar +\n      fbsNum * newGlucose +\n      tgNum * newTrigl -\n      hdlNum * newHdl +\n      ageNum * age;\n    metaAgeData = metaAgeTempVar.toFixed(0);\n  } else {\n    let mappedVar =\n      parseFloat(diastolicBP) +\n      parseFloat(mapperNumOne * (pressure - diastolicBP));\n    let metaAgeTempVar =\n      baseNum +\n      wcNum * (waist * cmConv) +\n      mapperNumTwo * mappedVar +\n      fbsNum * glucose +\n      tgNum * trigl -\n      hdlNum * hdl +\n      ageNum * age;\n    metaAgeData = metaAgeTempVar.toFixed(0);\n  }\n\n  return metaAgeData;\n}\nexport { getScorePercentile, getVitalityScore, getMetaAge };\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Base/SVG.jsx",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/VitalityScore.jsx",["205","206","207","208","209"],[],"import React, { useEffect, useState } from \"react\";\nimport ScoreLogic from \"./ScoreLogic\";\nimport MetaCalc from \"./CircleModel/MetaCalc.jsx\";\n\nimport { getVitalityScore, getMetaAge } from \"../../utils\";\nexport default function VitalityScore({ form, title, score, image, clName }) {\n  const [scoreStyle, setScoreStyle] = useState(\"\");\n  const [scoreHeight, setScoreHeight] = useState(\"\");\n  const [metabolicAge, setMetabolicAge] = useState(0);\n\n  useEffect(() => {\n    const vScore = getVitalityScore({ ...form, [\"score\"]: score });\n    const metaAgeData = getMetaAge({ ...form, [\"typeFlag\"]: \"type1\" });\n    setScoreStyle(vScore);\n    setMetabolicAge(metaAgeData);\n  });\n\n  useEffect(() => {\n    if (scoreStyle >= 0 && scoreStyle <= 10) {\n      setScoreHeight(scoreStyle * 2);\n    } else if (scoreStyle > 10 && scoreStyle < 20) {\n      setScoreHeight(scoreStyle * 2 + 5);\n    } else if (scoreStyle >= 20 && scoreStyle < 25) {\n      setScoreHeight(scoreStyle * 2 + 13);\n    } else if (scoreStyle >= 25 && scoreStyle <= 40) {\n      setScoreHeight(scoreStyle * 2 + 20);\n    } else if (scoreStyle > 40 && scoreStyle <= 45) {\n      setScoreHeight(scoreStyle * 2 + 15);\n    } else if (scoreStyle > 45 && scoreStyle <= 47) {\n      setScoreHeight(scoreStyle * 2 + 10);\n    } else if (scoreStyle > 47 && scoreStyle <= 50) {\n      setScoreHeight(scoreStyle * 2 + 7);\n    } else if (scoreStyle > 50 && scoreStyle < 53) {\n      setScoreHeight((100 - scoreStyle) * 2 + 7);\n    } else if (scoreStyle >= 53 && scoreStyle < 55) {\n      setScoreHeight((100 - scoreStyle) * 2 + 10);\n    } else if (scoreStyle >= 55 && scoreStyle < 60) {\n      setScoreHeight((100 - scoreStyle) * 2 + 15);\n    } else if (scoreStyle >= 60 && scoreStyle < 75) {\n      setScoreHeight((100 - scoreStyle) * 2 + 20);\n    } else if (scoreStyle >= 75 && scoreStyle < 80) {\n      setScoreHeight((100 - scoreStyle) * 2 + 13);\n    } else if (scoreStyle >= 80 && scoreStyle < 90) {\n      setScoreHeight((100 - scoreStyle) * 2 + 5);\n    } else {\n      setScoreHeight((100 - scoreStyle) * 2);\n    }\n  }, [scoreStyle]);\n  return (\n    <div className={clName}>\n      {image === \"/images/graph2.png\" ? (\n        <div className=\"doterraRowNoSplit \">\n          <div>\n            <h2 className=\"min-sm:text-[16px] font-light\">\n              Your Vitality<br></br> Score Could Be\n            </h2>\n            <h1 className=\"big max-sm:!text-[40px] max-sm:!font-bold\">\n              {/*\n                <ScoreLogic\n                  {...form}\n                  setScoreStyle={setScoreStyle}\n                  score={score}\n                />\n                */}\n\n              {scoreStyle}\n            </h1>\n          </div>\n          <div>\n            <h2 className=\"tagAlignRight font-light max-sm:text-[16px]\">\n              Your Metabolic<br></br> Age Could Be\n            </h2>\n            <h1 className=\"big tagAlignRight max-sm:!text-[40px] max-sm:!font-bold\">\n              {/*<MetaCalc {...form} typeFlag={\"type1\"} />*/}\n              {metabolicAge}\n            </h1>\n          </div>\n        </div>\n      ) : (\n        <>\n          <h2 className=\"min-sm:text-[20px] \">{title}</h2>\n          <h1 className=\"big\">\n            {/*\n              <ScoreLogic\n                {...form}\n                setScoreStyle={setScoreStyle}\n                score={score}\n              />\n              */}\n            {scoreStyle}\n          </h1>\n        </>\n      )}\n\n      <div className=\"vitality__inner\">\n        <div className=\"vitality__inner-image\">\n          <img src={process.env.PUBLIC_URL + image} alt=\"graph\" />\n\n          <span\n            className=\"vitality__line\"\n            style={{\n              left: scoreStyle + \"%\",\n              height: scoreHeight + \"%\",\n            }}\n          >\n            <span\n              className=\"vitality__score\"\n              style={{\n                left: scoreStyle + \"%\",\n              }}\n            >\n              {/*<ScoreLogic {...form} score={score} />*/}\n              {scoreStyle}\n            </span>\n          </span>\n        </div>\n        <span className=\"vitality__rectangle\"></span>\n        <span className=\"vitality__min\">1</span>\n        <span className=\"vitality__max\">100</span>\n      </div>\n      <h3 className=\"bold max-sm:text-[16px]\">\n        Your Vitality Score is better than {scoreStyle}% of your peers.\n      </h3>\n    </div>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CustomSelect.jsx",["210"],[],"// Import React, useEffect, useState, useRef\nimport React, { useEffect, useRef, useState } from \"react\";\n\n// Import Arrow from SVG.jsx\nimport { arrowDown } from \"../Base/SVG\";\n\n// Genearate a select template that requires a list of options and a function to handle the change\nconst CustomSelect = ({ selected = null, list, key = null, onChange }) => {\n  const wrapper = useRef(null);\n  const [active, setActive] = useState(false);\n  const [currentList, setCurrentList] = useState(list);\n  const [currentSelected, setCurrentSelected] = useState(selected);\n\n  const onClick = (item) => {\n    setCurrentSelected(item);\n    if (onChange) onChange(item);\n\n    setActive(false);\n  };\n\n  const toggleActive = () => {\n    setActive(!active);\n  };\n\n  useEffect(() => {\n    if (currentSelected)\n      setCurrentList(\n        list.filter((item) => {\n          let compareKey = key ?? \"value\";\n          return item[compareKey] !== currentSelected[compareKey];\n        })\n      );\n  }, [currentSelected]);\n\n  useEffect(() => {\n    setCurrentSelected(selected);\n  }, [selected]);\n\n  useEffect(() => {\n    const windowClick = ({ target }) => {\n      if (!wrapper.current.contains(target)) setActive(false);\n    };\n\n    if (active) window.addEventListener(\"click\", windowClick);\n    else window.removeEventListener(\"click\", windowClick);\n\n    return () => window.removeEventListener(\"click\", windowClick);\n  }, [active]);\n\n  return (\n    <div className={`select ${active ? \"active\" : \"\"}`} ref={wrapper}>\n      <div className=\"select__selected\" onClick={toggleActive}>\n        <div className=\"select__selected-inner\">\n          <span>{currentSelected ? currentSelected.value : \"-----\"}</span>\n          {currentSelected ? currentSelected.unit : \"-----\"}\n        </div>\n        {arrowDown}\n      </div>\n      <ul className=\"select__options active\">\n        {currentList.map((item, index) => (\n          <li key={index} onClick={() => onClick(item)}>\n            <span> {item.value}</span>\n            {item.unit}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CustomSelect;\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/RangeSlider/RangeSliderModul.js",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/CircleModel/CircleModel.jsx",["211","212","213"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nexport default function CircleModel(props) {\n  const twoPi = 3.1415926535 * 2;\n  const outerCircumference = 180 * twoPi;\n  const innerCircumference = 135 * twoPi;\n\n  const innerDash = innerCircumference * ((100 - props.actualAge) / 100);\n  const outerDash = outerCircumference * ((100 - props.metabolicAge) / 100);\n\n  const innerStyle = {\n    strokeDasharray: innerDash + \" \" + innerCircumference,\n    strokeDashoffset: 0,\n  };\n\n  return (\n    <div className=\"circleDisplay\">\n      <div className=\"partOne\">\n        <svg className=\"svg-pi svg-pi-outer\">\n          <circle className=\"svg-pi-track\" />\n          <circle\n            className=\"svg-pi-indicator\"\n            style={{\n              strokeDashoffset: outerDash + \"px\",\n              strokeDasharray: outerCircumference + \"px\",\n            }}\n          />\n          \";\n        </svg>\n      </div>\n\n      <div className=\"partTwo\">\n        <svg className=\"svg-pi svg-pi-inner\">\n          <circle className=\"svg-pi-track\" />\n          <circle\n            className=\"svg-pi-indicator\"\n            style={{\n              strokeDashoffset: innerDash + \"px\",\n              strokeDasharray: innerCircumference + \"px\",\n            }}\n          />\n          \";\n        </svg>\n      </div>\n\n      <div className=\"partThree\">\n        <span>\n          {props.metabolicAge}/{props.actualAge}\n        </span>\n      </div>\n    </div>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/RangeSlider/RangeSlider.jsx",[],[],"/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/Index/ScoreLogic.jsx",["214"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { getScorePercentile } from \"../../utils\";\nexport default function ScoreLogic(props) {\n  const [percentile, setPercentile] = useState(20);\n\n  useEffect(() => {\n    const scorePercentile = getScorePercentile({ ...props });\n    setPercentile(scorePercentile);\n  }, [props]);\n\n  useEffect(() => {\n    if (props.setScoreStyle) {\n      const result = ((percentile - 100) * -1).toFixed(0);\n      props.setScoreStyle(result);\n    }\n  }, [percentile]);\n\n  return <>{((percentile - 100) * -1).toFixed(0)}</>;\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityStatsBlock.jsx",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],[],"import React, { useState, useEffect } from \"react\";\nimport sub from \"date-fns/sub\";\nimport add from \"date-fns/add\";\nimport compareDesc from \"date-fns/compareDesc\";\n\nimport VitalityHistoryGraph from \"./VitalityHistoryGraph\";\nimport EditVitalityCalculator from \"../EditVitalityCalculator\";\n\nimport { getVitalityScore, getMetaAge } from \"../../utils\";\nimport { format } from \"date-fns\";\nconst timeRanges = [\"day\", \"week\", \"month\", \"year\"];\n\n/*\nconst vitalityGoalsData = [\n  {\n    name: \"Visit 1\",\n    scoreGoals: 61,\n    ageGoals: 50,\n  },\n  {\n    name: \"Visit 2\",\n    scoreGoals: 62,\n    ageGoals: 49,\n  },\n  {\n    name: \"Visit 3\",\n    scoreGoals: 64,\n    ageGoals: 49,\n  },\n\n  {\n    name: \"Visit 4\",\n    scoreGoals: 66,\n    ageGoals: 48,\n  },\n  {\n    name: \"Visit 5\",\n    scoreGoals: 68,\n    ageGoals: 47,\n  },\n  {\n    name: \"Visit 6\",\n    scoreGoals: 70,\n    ageGoals: 46,\n  },\n  {\n    name: \"Visit 7\",\n    scoreGoals: 72,\n    ageGoals: 45,\n  },\n  {\n    name: \"Visit 8\",\n    scoreGoals: 74,\n    ageGoals: 45,\n  },\n  {\n    name: \"Visit 9\",\n    scoreGoals: 76,\n    ageGoals: 44,\n  },\n];\n*/\n\nexport default function VitalityStatsBlock(props) {\n  const [vitalityProgressData, setVitalityProgressData] = useState([]);\n  const [vitalityGoalsData, setvitalityGoalsData] = useState([]);\n  const [selectedTimeRange, setSelectedTimeRange] = useState(null);\n  const [tab, setTab] = useState(\"progress\");\n  const [historicalDataPopup, setHistoricalDataPopup] = useState(false);\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [dateDiffFormat, setDateDiffFormat] = useState(\"\");\n\n  useEffect(() => {\n    selectDateRangeFunc();\n  }, [props]);\n\n  const selectDateRangeFunc = (selectedRange = \"month\") => {\n    setSelectedTimeRange(selectedRange);\n    let endDate,\n      startDate,\n      dateRangeArr = [];\n\n    endDate = new Date();\n    if (selectedRange == \"year\") {\n      startDate = sub(endDate, {\n        years: 1,\n      });\n    } else if (selectedRange == \"month\") {\n      startDate = sub(endDate, {\n        months: 1,\n      });\n    } else if (selectedRange == \"week\") {\n      startDate = sub(endDate, {\n        weeks: 1,\n      });\n    } else {\n      startDate = sub(endDate, {\n        days: 1,\n      });\n    }\n\n    dateRangeArr = [startDate, endDate];\n    setDateRange(dateRangeArr);\n    filterData(dateRangeArr);\n    formatDateDifferenceFunc(dateRangeArr);\n  };\n\n  const filterData = (dateRangeArr = []) => {\n    let vitalityScores = [],\n      vitalityMetaGoals = [];\n    if (selectedTimeRange && props.historyData) {\n      const copyHistoryData = [].concat(props.historyData);\n      const filteredHistoryData = copyHistoryData.filter((data, index) =>\n        compareDesc(new Date(dateRangeArr[0]), new Date(data.timeStamp)) == 1 &&\n        compareDesc(new Date(data.timeStamp), new Date(dateRangeArr[1])) == 1\n          ? true\n          : false\n      );\n\n      if (filteredHistoryData) {\n        if (tab == \"progress\") {\n          filteredHistoryData\n            .slice(0)\n            .reverse()\n            .filter((data, index) => {\n              vitalityScores.push({\n                name: `Visit ${index}`,\n                score: getVitalityScore({ ...data.form, score: 0 }),\n              });\n            });\n\n          if (vitalityScores) {\n            setVitalityProgressData(vitalityScores);\n          }\n        } else if (tab == \"goals\") {\n          filteredHistoryData\n            .slice(0)\n            .reverse()\n            .filter((data, index) => {\n              vitalityMetaGoals.push({\n                name: `Visit ${index}`,\n                scoreGoals: getVitalityScore({ ...data.form, score: 0 }),\n                ageGoals: getMetaAge({ ...data.form }),\n              });\n            });\n\n          if (vitalityMetaGoals) {\n            setvitalityGoalsData(vitalityMetaGoals);\n          }\n        }\n      }\n    }\n  };\n\n  const previous = () => {\n    let endDate,\n      startDate,\n      updatedStartDate,\n      updatedEndDate,\n      dateRangeArr = [];\n\n    endDate = dateRange[1];\n    startDate = dateRange[0];\n\n    if (selectedTimeRange == \"year\") {\n      updatedStartDate = sub(startDate, {\n        years: 1,\n      });\n      updatedEndDate = sub(endDate, {\n        years: 1,\n      });\n    } else if (selectedTimeRange == \"month\") {\n      updatedStartDate = sub(startDate, {\n        months: 1,\n      });\n      updatedEndDate = sub(endDate, {\n        months: 1,\n      });\n    } else if (selectedTimeRange == \"week\") {\n      updatedStartDate = sub(startDate, {\n        weeks: 1,\n      });\n      updatedEndDate = sub(endDate, {\n        weeks: 1,\n      });\n    } else {\n      updatedStartDate = sub(startDate, {\n        days: 1,\n      });\n      updatedEndDate = sub(endDate, {\n        days: 1,\n      });\n    }\n\n    dateRangeArr = [updatedStartDate, updatedEndDate];\n    setDateRange(dateRangeArr);\n    formatDateDifferenceFunc(dateRangeArr);\n    filterData(dateRangeArr);\n  };\n\n  const next = () => {\n    let endDate,\n      startDate,\n      updatedStartDate,\n      updatedEndDate,\n      dateRangeArr = [];\n\n    endDate = dateRange[1];\n    startDate = dateRange[0];\n\n    if (selectedTimeRange == \"year\") {\n      updatedStartDate = add(startDate, {\n        years: 1,\n      });\n      updatedEndDate = add(endDate, {\n        years: 1,\n      });\n    } else if (selectedTimeRange == \"month\") {\n      updatedStartDate = add(startDate, {\n        months: 1,\n      });\n      updatedEndDate = add(endDate, {\n        months: 1,\n      });\n    } else if (selectedTimeRange == \"week\") {\n      updatedStartDate = add(startDate, {\n        weeks: 1,\n      });\n      updatedEndDate = add(endDate, {\n        weeks: 1,\n      });\n    } else {\n      updatedStartDate = add(startDate, {\n        days: 1,\n      });\n      updatedEndDate = add(endDate, {\n        days: 1,\n      });\n    }\n\n    dateRangeArr = [updatedStartDate, updatedEndDate];\n    setDateRange(dateRangeArr);\n    formatDateDifferenceFunc(dateRangeArr);\n    filterData(dateRangeArr);\n  };\n\n  const formatDateDifferenceFunc = (dateRangeArr) => {\n    let dateFormat = \"\";\n    if (dateRangeArr[0] && dateRangeArr[1]) {\n      dateFormat = `${format(\n        new Date(dateRangeArr[0]),\n        \"MMMM d yyyy \"\n      )}-${format(new Date(dateRangeArr[1]), \" MMMM d yyyy\")}`;\n    }\n\n    setDateDiffFormat(dateFormat);\n  };\n  return (\n    <div className=\"bg-secondary sm:border-[1px]\">\n      <div>\n        <div className=\"flex w-full max-w-none flex-row flex-nowrap\">\n          <div\n            className={`flex w-1/2 cursor-pointer flex-row flex-nowrap justify-center py-4 sm:border-b-[1px] ${\n              tab == \"progress\"\n                ? \"border-b-[6px] border-b-primary sm:bg-primary\"\n                : \"\"\n            }`}\n            onClick={() => setTab(\"progress\")}\n          >\n            <p\n              className={`text-center font-montserrat text-xs leading-5 sm:text-xl ${\n                tab == \"progress\" ? \"font-bold sm:text-secondary\" : \"text-black\"\n              }`}\n            >\n              Vitality Progress\n            </p>\n          </div>\n          <div\n            className={`flex w-1/2 cursor-pointer flex-row flex-nowrap justify-center py-4 sm:border-l-[1px] sm:border-b-[1px] ${\n              tab == \"goals\"\n                ? \"border-b-[6px] border-b-primary sm:bg-primary\"\n                : \"\"\n            }`}\n            onClick={() => setTab(\"goals\")}\n          >\n            <p\n              className={`text-center font-montserrat text-xs leading-5 sm:text-xl   ${\n                tab == \"goals\" ? \"font-bold sm:text-secondary\" : \"text-black\"\n              }`}\n            >\n              Vitality Goals\n            </p>\n          </div>\n        </div>\n        <div className=\"py-8 px-4 sm:px-12 sm:py-10\">\n          <div className=\"flex flex-row flex-nowrap justify-between gap-2 sm:gap-5\">\n            {timeRanges.map((tRange, index) => (\n              <div\n                key={index}\n                className={`px:3 ms:px-8 grow cursor-pointer rounded-full border-[1px] py-2 text-center text-xs uppercase md:text-base ${\n                  tRange == selectedTimeRange\n                    ? \"bg-black text-secondary\"\n                    : \"bg-secondary\"\n                }`}\n                onClick={() => selectDateRangeFunc(tRange)}\n              >\n                <span>{tRange}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-6 flex h-16 cursor-pointer flex-row flex-nowrap items-center justify-between sm:mt-9\">\n            <div className=\"w-[12px] sm:w-[22px]\" onClick={() => previous()}>\n              <svg\n                width=\"100%\"\n                height=\"42\"\n                viewBox=\"0 0 22 42\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M21 1.31011L1.00003 21.3L21 41.3101\"\n                  stroke=\"black\"\n                  stroke-miterlimit=\"10\"\n                />\n              </svg>\n            </div>\n            <div className=\"cursor-pointer font-montserrat text-sm font-light text-black sm:text-base sm:font-bold\">\n              {dateDiffFormat}\n            </div>\n            <div className=\"w-[12px] sm:w-[22px]\" onClick={() => next()}>\n              <svg\n                width=\"100%\"\n                height=\"42\"\n                viewBox=\"0 0 22 42\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M1 41.31L21 21.3202L1 1.31006\"\n                  stroke=\"black\"\n                  stroke-miterlimit=\"10\"\n                />\n              </svg>\n            </div>\n          </div>\n          <div className=\"mt-5\">\n            {tab == \"progress\" ? (\n              <div className=\"flex flex-row gap-4\">\n                <div className=\"w-[40px] sm:w-[80px]\">\n                  <svg\n                    width=\"100%\"\n                    height=\"21\"\n                    viewBox=\"0 0 80 21\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <line\n                      y1=\"9.31006\"\n                      x2=\"80\"\n                      y2=\"9.31006\"\n                      stroke=\"#6D7B9B\"\n                      stroke-width=\"2\"\n                    />\n                    <circle cx=\"40\" cy=\"10.3101\" r=\"10\" fill=\"#6D7B9B\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-montserrat text-base leading-5 text-primary\">\n                    Vitality Score\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex flex-row gap-4\">\n                <div className=\"w-[40px] sm:w-[80px]\">\n                  <svg\n                    width=\"100%\"\n                    height=\"21\"\n                    viewBox=\"0 0 80 21\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <line\n                      y1=\"9.31006\"\n                      x2=\"80\"\n                      y2=\"9.31006\"\n                      stroke=\"#6D7B9B\"\n                      stroke-width=\"2\"\n                    />\n                    <circle cx=\"40\" cy=\"10.3101\" r=\"10\" fill=\"#7D9D92\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-montserrat text-xs leading-5 text-primary sm:text-base\">\n                    Vitality Score Goals\n                  </p>\n                </div>\n\n                <div className=\"w-[40px] sm:w-[80px]\">\n                  <svg\n                    width=\"100%\"\n                    height=\"21\"\n                    viewBox=\"0 0 80 21\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <line\n                      y1=\"9.31006\"\n                      x2=\"80\"\n                      y2=\"9.31006\"\n                      stroke=\"#F7A08C\"\n                      stroke-width=\"2\"\n                    />\n                    <circle cx=\"40\" cy=\"10.3101\" r=\"10\" fill=\"#F7A08C\" />\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"font-montserrat text-xs leading-5 text-primary sm:text-base\">\n                    Metabolic Age Goals\n                  </p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"mt-10\">\n              <div>\n                {tab == \"progress\" ? (\n                  <VitalityHistoryGraph\n                    lineData={vitalityProgressData}\n                    line1Color=\"#6D7B9B\"\n                    line1DataKey=\"score\"\n                    YLable={\"Score\"}\n                  />\n                ) : (\n                  <VitalityHistoryGraph\n                    lineData={vitalityGoalsData}\n                    line1Color=\"#7D9D92\"\n                    line2Color=\"#F7A08C\"\n                    line1DataKey=\"scoreGoals\"\n                    line2DataKey=\"ageGoals\"\n                    YLable={\"GOAL\"}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-5 text-center font-montserrat text-xl leading-6 text-black underline\">\n            <p\n              className=\"cursor-pointer\"\n              onClick={() => setHistoricalDataPopup(true)}\n            >\n              Add historical data\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {historicalDataPopup ? (\n        <EditVitalityCalculator\n          close={() => setHistoricalDataPopup(false)}\n          loadHistoryData={props.loadHistoryData}\n        />\n      ) : null}\n    </div>\n  );\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityScoreHistory.jsx",["238","239"],[],"import React, { useState, useEffect } from \"react\";\nimport { compareAsc, format } from \"date-fns\";\nimport { useSwipeable } from \"react-swipeable\";\nimport VitalityScoreGraph from \"./VitalityScoreGraph\";\nimport EditVitalityCalculator from \"../EditVitalityCalculator\";\nimport { getVitalityScore, getMetaAge } from \"../../utils\";\n\nconst VitalityScoreHistory = (props) => {\n  const [actionArea, setActionArea] = useState(false);\n  const [vsHistory, setVsHistory] = useState(false);\n  const [scoreStyle, setScoreStyle] = useState(\"\");\n  const [metabolicAge, setMetabolicAge] = useState(0);\n  const [historicalDataPopup, setHistoricalDataPopup] = useState(false);\n\n  useEffect(() => {\n    const vScore = getVitalityScore({ ...props.form, [\"score\"]: 0 });\n    const metaAgeData = getMetaAge({ ...props.form });\n    setScoreStyle(vScore);\n    setMetabolicAge(metaAgeData);\n    setVsHistory(props.vsHistory);\n  }, [props]);\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      setActionArea(true);\n    },\n    onSwipedRight: () => {\n      setActionArea(false);\n    },\n    swipeDuration: 500,\n    preventScrollOnSwipe: true,\n    trackMouse: true,\n  });\n\n  return vsHistory ? (\n    <div\n      className=\"relative flex flex-row flex-nowrap border-b-[1px] sm:mt-16 sm:border-[1px] sm:border-l-[15px] sm:border-l-primary \"\n      {...handlers}\n    >\n      <div\n        className={`flex grow flex-row flex-nowrap justify-between py-10 px-0 sm:px-6 sm:pl-6 md:pl-20`}\n        onClick={() => setActionArea(false)}\n      >\n        <div className=\"w-full\">\n          <div className=\"\">\n            <div>\n              <span className=\"font-montserrat text-xl font-bold leading-6 text-black \">\n                {format(new Date(vsHistory.timeStamp), \"MMMM, dd yyyy\")}\n              </span>\n            </div>\n\n            <div className=\"flex flex-row flex-wrap \">\n              <div className=\"mt-4 w-1/2 border-r-[1px] max-sm:pr-1\">\n                <p className=\"font-montserrat text-base leading-[20px] text-primary\">\n                  Your Metabolic Age\n                </p>\n                <p className=\"font-montserrat text-4xl leading-[49px] text-primary\">\n                  {metabolicAge}\n                </p>\n              </div>\n\n              <div className=\"mt-4 flex w-1/2 flex-col items-center pl-2\">\n                <div>\n                  <p className=\"font-montserrat text-base leading-[20px] text-third\">\n                    Your Vitality Score\n                  </p>\n                  <p className=\"font-montserrat text-4xl leading-[49px] text-third\">\n                    {scoreStyle}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-center sm:block\">\n            <button\n              className=\"mt-10 mr-3 rounded-3xl bg-black py-3 px-10 text-center font-montserrat text-xl font-bold leading-[24px] text-secondary\"\n              onClick={() => setHistoricalDataPopup(true)}\n            >\n              See Full Results\n            </button>\n          </div>\n        </div>\n\n        <div className=\"relative hidden min-w-[200px] grow sm:block\">\n          <VitalityScoreGraph value1={metabolicAge} value2={scoreStyle} />\n\n          <div className=\"absolute right-0 left-0 top-0 bottom-0 flex items-center justify-center\">\n            <p className=\"text-xl font-bold\">\n              <span className=\"text-primary\">{metabolicAge}</span>/\n              <span className=\"text-third\">{scoreStyle}</span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"top-0 bottom-0 right-0 hidden max-w-[80px] grow flex-col justify-between p-5 sm:absolute sm:flex md:relative\">\n        <div\n          className=\"flex h-8 w-8 cursor-pointer items-center justify-center rounded-full border-[1px]\"\n          onClick={() => props.setDeletePopupToggleFunc(props)}\n        >\n          <svg\n            width=\"14\"\n            height=\"13\"\n            viewBox=\"0 0 14 13\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M10.8267 12.9723L7.20797 9.35357L3.67244 12.8891L0.989592 10.2063L4.52513 6.67072L0.927201 3.0728L3.46447 0.535534L7.06239 4.13346L10.5979 0.597925L13.2808 3.28077L9.74524 6.8163L13.364 10.435L10.8267 12.9723Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </div>\n\n        <div className=\"flex h-8 w-8 cursor-pointer items-center justify-center\">\n          <svg\n            width=\"26\"\n            height=\"26\"\n            viewBox=\"0 0 26 26\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M9.44721 14.1056C8.95324 13.8586 8.35256 14.0588 8.10557 14.5528C7.85858 15.0468 8.05881 15.6474 8.55279 15.8944L9.44721 14.1056ZM16.5528 19.8944C17.0468 20.1414 17.6474 19.9412 17.8944 19.4472C18.1414 18.9532 17.9412 18.3526 17.4472 18.1056L16.5528 19.8944ZM17.4472 7.89443C17.9412 7.64744 18.1414 7.04676 17.8944 6.55279C17.6474 6.05881 17.0468 5.85858 16.5528 6.10557L17.4472 7.89443ZM8.55279 10.1056C8.05881 10.3526 7.85858 10.9532 8.10557 11.4472C8.35256 11.9412 8.95324 12.1414 9.44721 11.8944L8.55279 10.1056ZM21 24C19.3431 24 18 22.6569 18 21H16C16 23.7614 18.2386 26 21 26V24ZM18 21C18 19.3431 19.3431 18 21 18V16C18.2386 16 16 18.2386 16 21H18ZM21 18C22.6569 18 24 19.3431 24 21H26C26 18.2386 23.7614 16 21 16V18ZM24 21C24 22.6569 22.6569 24 21 24V26C23.7614 26 26 23.7614 26 21H24ZM8.55279 15.8944L16.5528 19.8944L17.4472 18.1056L9.44721 14.1056L8.55279 15.8944ZM5 16C3.34315 16 2 14.6569 2 13H0C0 15.7614 2.23858 18 5 18V16ZM2 13C2 11.3431 3.34315 10 5 10V8C2.23858 8 0 10.2386 0 13H2ZM5 10C6.65685 10 8 11.3431 8 13H10C10 10.2386 7.76142 8 5 8V10ZM8 13C8 14.6569 6.65685 16 5 16V18C7.76142 18 10 15.7614 10 13H8ZM16.5528 6.10557L8.55279 10.1056L9.44721 11.8944L17.4472 7.89443L16.5528 6.10557ZM21 8C19.3431 8 18 6.65685 18 5H16C16 7.76142 18.2386 10 21 10V8ZM18 5C18 3.34315 19.3431 2 21 2V0C18.2386 0 16 2.23858 16 5H18ZM21 2C22.6569 2 24 3.34315 24 5H26C26 2.23858 23.7614 0 21 0V2ZM24 5C24 6.65685 22.6569 8 21 8V10C23.7614 10 26 7.76142 26 5H24Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </div>\n      </div>\n\n      {actionArea ? (\n        <div\n          className={`flex min-h-full min-w-[80px] cursor-pointer items-center justify-center bg-[#F2644E] sm:hidden`}\n          onClick={() => props.setDeletePopupToggleFunc(props)}\n        >\n          <svg\n            width=\"16\"\n            height=\"22\"\n            viewBox=\"0 0 16 22\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M12.8922 20.9999H2.82282L0.795898 5.70215H14.9191L12.8922 20.9999Z\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n            <path\n              d=\"M5.34662 17.0033L4.51465 8.92822\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n            <path\n              d=\"M7.85547 17.0033V8.92822\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n            <path\n              d=\"M10.3672 17.0033L11.1992 8.92822\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n            <path\n              d=\"M0 3.53662H15.7137\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n            <path\n              d=\"M11.6097 3.53671L10.9817 1H4.72962L4.10156 3.53671\"\n              stroke=\"#FAF4ED\"\n              stroke-miterlimit=\"10\"\n            />\n          </svg>\n        </div>\n      ) : (\n        <div\n          className=\"absolute top-0 bottom-0 right-0 flex cursor-pointer flex-col justify-between p-5 sm:hidden\"\n          onClick={() => setActionArea(true)}\n        >\n          <svg\n            width=\"24\"\n            height=\"23\"\n            viewBox=\"0 0 24 23\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M22 1L14.3591 10.0527V17.1228L9.6409 21V10.0527L2 1H22Z\"\n              stroke=\"black\"\n              stroke-miterlimit=\"10\"\n            />\n          </svg>\n        </div>\n      )}\n\n      {historicalDataPopup && vsHistory ? (\n        <EditVitalityCalculator\n          vsHistory={vsHistory}\n          close={() => setHistoricalDataPopup(false)}\n          loadHistoryData={props.loadHistoryData}\n        />\n      ) : null}\n    </div>\n  ) : null;\n};\n\nexport default VitalityScoreHistory;\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/VitalityHistory/VitalityHistoryGraph.jsx",["240","241","242","243","244"],[],"import React, { PureComponent } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  Dot,\n} from \"recharts\";\n\nexport default class VitalityHistoryGraph extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineData: this.props.lineData,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      lineData: this.props.lineData,\n    });\n  }\n\n  render() {\n    const lineData = this.state.lineData;\n    return lineData ? (\n      <div style={{ width: \"100%\" }}>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart\n            width={500}\n            height={400}\n            data={this.props.lineData}\n            syncId=\"anyId\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis\n              label={{\n                value: this.props.YLable,\n                angle: -90,\n                position: \"insideLeft\",\n                offset: 12,\n              }}\n              minTickGap={5}\n              allowDecimals={false}\n            />\n            <Tooltip />\n\n            {this.props.line1DataKey ? (\n              <Line\n                type=\"monotone\"\n                dataKey={this.props.line1DataKey}\n                stroke={this.props.line1Color}\n                fill={this.props.line1Color}\n                dot={{ stroke: this.props.line1Color, strokeWidth: 8 }}\n              />\n            ) : null}\n\n            {this.props.line2DataKey ? (\n              <Line\n                type=\"monotone\"\n                dataKey={this.props.line2DataKey}\n                stroke={this.props.line2Color}\n                fill={this.props.line2Color}\n                dot={{ stroke: this.props.line2Color, strokeWidth: 8 }}\n              />\n            ) : null}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    ) : null;\n  }\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/EditVitalityCalculator/index.jsx",["245","246","247","248"],[],"import React, { useState, useEffect } from \"react\";\nimport isToday from \"date-fns/isToday\";\nimport differenceInDays from \"date-fns/differenceInDays\";\nimport Step1 from \"../Index/Step1\";\nimport Step2 from \"../Index/Step2\";\nimport Step3 from \"../Index/Step3\";\nimport Step4 from \"../Index/Step4\";\nimport Step5 from \"../Index/Step5\";\nimport BasicDatePicker from \"../CommonComponents/index\";\n\nimport { setItem, getItem } from \"../../localStore\";\nimport { isSameDay } from \"date-fns\";\nconst steps = [\"step1\", \"step2\", \"step3\", \"step4\", \"step5\", \"step6\"];\n\n// Define the data that will be collected in the form\nconst initForm = {\n  age: 50,\n  sex: \"\",\n  asian: false,\n  pacIsl: false,\n  whiteOrCaucas: false,\n  blackAfrAmer: false,\n  hispLat: false,\n  natAmerAlas: false,\n  multBirac: false,\n  notListed: false,\n  extraRace: \"\",\n  feet: \"\",\n  inches: \"\",\n  heightUnit: \"(in)\",\n  weight: \"\",\n  weightUnit: \"(lbs)\",\n  pressure: 120,\n  hdl: 60,\n  trigl: 150,\n  glucose: 90,\n  a1c: 4.7,\n  newWeight: 150,\n  newPressure: 120,\n  newHdl: 60,\n  newTrigl: 150,\n  newGlucose: 90,\n  waist: \"\",\n  newWaist: 30,\n  diastolicBP: 70,\n  newDiastolicBP: 70,\n  metabolicAge: 0,\n  a1cPref: 0,\n  newA1cPref: 0,\n  newA1c: 4.7,\n};\n\nexport default function EditVitalityCalculator(props) {\n  // add the variables form and step using useState. set form var to initForm data from and set step var to the first step in the steps array\n  const [form, setForm] = useState(initForm);\n  const [step, setStep] = useState(steps[0]);\n  const [timeStamp, setTimeStamp] = useState(null);\n\n  useEffect(() => {\n    if (props.vsHistory) {\n      setTimeStamp(props.vsHistory.timeStamp);\n      setForm(props.vsHistory.form);\n    } else {\n      setTimeStamp(new Date());\n    }\n  }, []);\n\n  // Spread operator used to copy data from one array to another\n  const updateForm = (data) => {\n    setForm({ ...form, ...data });\n  };\n\n  // this function helps to set the corresponding items in the array to their matching input value\n  const setInput = (key) => (event) =>\n    updateForm({ [key]: event.target.value });\n\n  // this function helps to set the corresponding items in the array to their matching input value\n  const setInputDirect = (keyOne, directValueOne, keyTwo, directValueTwo) => {\n    updateForm({ [keyOne]: directValueOne, [keyTwo]: directValueTwo });\n  };\n\n  // this function helps set the checks for the items that are clicked by the user\n  const setCheckbox = (key) => (event) =>\n    updateForm({ [key]: event.target.checked });\n\n  // use this funtion to get the index of the current step\n  const currentIndex = React.useMemo(() => steps.indexOf(step), [step]);\n\n  // Define function for changing step to go back one\n  const prevTab = () => {\n    if (currentIndex > 0) setStep(steps[currentIndex - 1]);\n  };\n  // Define function to change step to go forward one\n  // Define function to change step to go forward one\n  // Define function to change step to go forward one\n  const nextTab = () => {\n    let lastTestId,\n      lastTest,\n      isTestAlreadyExist = false;\n\n    // get saved data forms from localstorage\n    const oldTests = getItem(\"forms\");\n    if (oldTests) {\n      for (let i = 0; i < oldTests.length; i++) {\n        if (\n          differenceInDays(\n            new Date(oldTests[i].timeStamp),\n            new Date(timeStamp)\n          ) <= 1 &&\n          isSameDay(new Date(oldTests[i].timeStamp), new Date(timeStamp))\n        ) {\n          isTestAlreadyExist = true;\n          break;\n        }\n      }\n\n      lastTest = oldTests[oldTests.length - 1];\n      lastTestId = parseInt(lastTest.id);\n\n      if (isTestAlreadyExist) {\n        if (\n          window.confirm(\n            \"Do you want to override your previous test on the same data?\"\n          )\n        ) {\n          oldTests[oldTests.length - 1][\"form\"] = form;\n          setItem(\"forms\", oldTests);\n          props.loadHistoryData();\n        }\n      } else {\n        oldTests.push({\n          id: lastTestId + 1,\n          timeStamp: new Date(timeStamp),\n          form: form,\n        });\n        setItem(\"forms\", oldTests);\n        props.loadHistoryData();\n        props.close();\n      }\n    } else {\n      setItem(\"forms\", [{ id: 1, timeStamp: new Date(timeStamp), form: form }]);\n      props.loadHistoryData();\n      props.close();\n    }\n  };\n\n  const jumpTab = (index) => {\n    if (index < steps.length - 1) setStep(steps[index]);\n    // we have old forms data stored on localstorage\n    const oldTests = getItem(\"forms\");\n    if (oldTests) {\n      // check the vitality history for the last submitted form\n      setForm(oldTests[oldTests.length - 1].form);\n      window.scrollTo(0, 0);\n    }\n  };\n\n  const commonProps = {\n    prevTab,\n    nextTab,\n    jumpTab,\n    form,\n    updateForm,\n    setInput,\n    setInputDirect,\n    setCheckbox,\n  };\n\n  // this function fills in the circles by using css and additonal class names fill and active to bold the text\n  // add the following line to lie 94ish righ tafter className to add onlick step setter\n  // onClick={() => {setStep(steps[0]);}}\n\n  const isValid =\n    form.age !== \"\" &&\n    form.sex !== \"\" &&\n    (form.asian !== false ||\n      form.pacIsl !== false ||\n      form.whiteOrCaucas !== false ||\n      form.blackAfrAmer !== false ||\n      form.hispLat !== false ||\n      form.natAmerAlas !== false ||\n      form.multBirac !== false ||\n      form.notListed !== false ||\n      form.extraRace !== \"\") &&\n    form.hdl !== \"\" &&\n    form.trigl !== \"\" &&\n    form.glucose !== \"\" &&\n    form.feet !== \"\" &&\n    form.inches !== \"\" &&\n    form.waist !== \"\" &&\n    form.weight !== \"\" &&\n    form.pressure !== \"\";\n\n  return form ? (\n    <div className=\"fixed top-0 left-0 bottom-0 right-0 z-10 m-7 max-[540px]:m-0\">\n      <div\n        className=\"fixed top-0 left-0 bottom-0 right-0 -z-[1] flex items-center justify-center bg-black opacity-[0.65]\"\n        onClick={props.close}\n      ></div>\n\n      <div className=\"relative mx-auto h-full w-full max-w-[1080px] overflow-auto bg-secondary pb-16 max-[540px]:px-[30px]\">\n        <div\n          className=\"absolute top-5 right-5 flex h-8 w-8 cursor-pointer items-center justify-center rounded-full border-[1px]\"\n          onClick={props.close}\n        >\n          <svg\n            width=\"14\"\n            height=\"13\"\n            viewBox=\"0 0 14 13\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M10.8267 12.9723L7.20797 9.35357L3.67244 12.8891L0.989592 10.2063L4.52513 6.67072L0.927201 3.0728L3.46447 0.535534L7.06239 4.13346L10.5979 0.597925L13.2808 3.28077L9.74524 6.8163L13.364 10.435L10.8267 12.9723Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </div>\n        <div className=\"px-[96px] pt-[100px] max-[840px]:px-[70px] max-[700px]:px-[40px] max-[540px]:px-0\">\n          <h2 className=\"font-montserrat text-3xl capitalize leading-[34px] max-[540px]:text-2xl\">\n            Add historical data to calculate a vitality score\n          </h2>\n\n          <div className=\"mt-12\">\n            <BasicDatePicker value={timeStamp} setValue={setTimeStamp} />\n          </div>\n        </div>\n\n        <div className=\"max-[540px]:my-[40px]\">\n          {<Step2 {...commonProps} type=\"2\" />}\n          {<Step3 {...commonProps} type=\"2\" />}\n          {<Step4 {...commonProps} type=\"2\" />}\n        </div>\n\n        <div className=\"flex items-center justify-end gap-4 px-[96px] max-[840px]:flex-col  max-[840px]:justify-center max-[840px]:px-[70px] max-[700px]:px-[40px] max-[540px]:px-0\">\n          {/*\n          <button\n            type=\"button\"\n            className=\"button primary mt-0 border-[1px] border-black !bg-transparent !text-black hover:!bg-primary hover:!text-white\"\n            disabled={!isValid}\n            onClick={nextTab}\n          >\n            Cancel\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button primary mt-0 border-[1px] border-black\"\n            disabled={!isValid}\n            onClick={nextTab}\n          >\n            Continue\n          </button>\n        */}\n\n          <button\n            type=\"button\"\n            className=\"button primary clearDT back  max-[540px]:!w-[280px] max-[540px]:px-[30px] max-[540px]:!py-[14px]\"\n            onClick={props.close}\n          >\n            Cancel\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button primary !mt-5 !border-[1px] border-black hover:!border-primary\"\n            disabled={!isValid}\n            onClick={nextTab}\n          >\n            Continue\n          </button>\n        </div>\n      </div>\n    </div>\n  ) : null;\n}\n","/home/sheraz/MyDrive/fiverPros/powerMe-dev/vscore/src/Components/CommonComponents/index.jsx",["249","250"],[],"import React, { useState } from \"react\";\nimport { Dayjs } from \"dayjs\";\nimport TextField from \"@mui/material/TextField\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n\nexport default function BasicDatePicker(props) {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DatePicker\n        label=\"Select Date\"\n        value={props.value}\n        onChange={(newValue) => {\n          props.setValue(newValue);\n        }}\n        renderInput={(params) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  );\n}\n",{"ruleId":"251","severity":1,"message":"252","line":6,"column":8,"nodeType":"253","messageId":"254","endLine":6,"endColumn":15},{"ruleId":"251","severity":1,"message":"255","line":15,"column":28,"nodeType":"253","messageId":"254","endLine":15,"endColumn":38},{"ruleId":"251","severity":1,"message":"256","line":15,"column":40,"nodeType":"253","messageId":"254","endLine":15,"endColumn":47},{"ruleId":"257","severity":1,"message":"258","line":97,"column":22,"nodeType":"259","messageId":"260","endLine":97,"endColumn":24},{"ruleId":"251","severity":1,"message":"261","line":165,"column":9,"nodeType":"253","messageId":"254","endLine":165,"endColumn":16},{"ruleId":"251","severity":1,"message":"262","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":20},{"ruleId":"251","severity":1,"message":"255","line":7,"column":28,"nodeType":"253","messageId":"254","endLine":7,"endColumn":38},{"ruleId":"251","severity":1,"message":"256","line":7,"column":40,"nodeType":"253","messageId":"254","endLine":7,"endColumn":47},{"ruleId":"251","severity":1,"message":"263","line":88,"column":10,"nodeType":"253","messageId":"254","endLine":88,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":95,"column":7,"nodeType":"266","messageId":"267","endLine":95,"endColumn":19,"fix":"268"},{"ruleId":"251","severity":1,"message":"269","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":31,"column":16,"nodeType":"259","messageId":"260","endLine":31,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":34,"column":15,"nodeType":"259","messageId":"260","endLine":34,"endColumn":17},{"ruleId":"257","severity":1,"message":"258","line":63,"column":35,"nodeType":"259","messageId":"260","endLine":63,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":74,"column":35,"nodeType":"259","messageId":"260","endLine":74,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":85,"column":35,"nodeType":"259","messageId":"260","endLine":85,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":96,"column":35,"nodeType":"259","messageId":"260","endLine":96,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":192,"column":15,"nodeType":"259","messageId":"260","endLine":192,"endColumn":17},{"ruleId":"251","severity":1,"message":"270","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":17},{"ruleId":"251","severity":1,"message":"255","line":2,"column":28,"nodeType":"253","messageId":"254","endLine":2,"endColumn":38},{"ruleId":"251","severity":1,"message":"256","line":2,"column":40,"nodeType":"253","messageId":"254","endLine":2,"endColumn":47},{"ruleId":"251","severity":1,"message":"271","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":20},{"ruleId":"251","severity":1,"message":"272","line":7,"column":7,"nodeType":"253","messageId":"254","endLine":7,"endColumn":17},{"ruleId":"251","severity":1,"message":"273","line":13,"column":7,"nodeType":"253","messageId":"254","endLine":13,"endColumn":17},{"ruleId":"251","severity":1,"message":"274","line":27,"column":10,"nodeType":"253","messageId":"254","endLine":27,"endColumn":16},{"ruleId":"251","severity":1,"message":"275","line":35,"column":9,"nodeType":"253","messageId":"254","endLine":35,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":44,"column":16,"nodeType":"259","messageId":"260","endLine":44,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":47,"column":15,"nodeType":"259","messageId":"260","endLine":47,"endColumn":17},{"ruleId":"257","severity":1,"message":"258","line":141,"column":13,"nodeType":"259","messageId":"260","endLine":141,"endColumn":15},{"ruleId":"257","severity":1,"message":"258","line":19,"column":31,"nodeType":"259","messageId":"260","endLine":19,"endColumn":33},{"ruleId":"257","severity":1,"message":"258","line":21,"column":16,"nodeType":"259","messageId":"260","endLine":21,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":24,"column":15,"nodeType":"259","messageId":"260","endLine":24,"endColumn":17},{"ruleId":"257","severity":1,"message":"258","line":120,"column":13,"nodeType":"259","messageId":"260","endLine":120,"endColumn":15},{"ruleId":"251","severity":1,"message":"276","line":143,"column":7,"nodeType":"253","messageId":"254","endLine":143,"endColumn":12},{"ruleId":"251","severity":1,"message":"277","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":16},{"ruleId":"278","severity":1,"message":"279","line":20,"column":3,"nodeType":"253","endLine":20,"endColumn":12,"suggestions":"280"},{"ruleId":"257","severity":1,"message":"258","line":2,"column":26,"nodeType":"259","messageId":"260","endLine":2,"endColumn":28},{"ruleId":"257","severity":1,"message":"258","line":6,"column":30,"nodeType":"259","messageId":"260","endLine":6,"endColumn":32},{"ruleId":"251","severity":1,"message":"281","line":2,"column":25,"nodeType":"253","messageId":"254","endLine":2,"endColumn":31},{"ruleId":"251","severity":1,"message":"282","line":1,"column":8,"nodeType":"253","messageId":"254","endLine":1,"endColumn":13},{"ruleId":"278","severity":1,"message":"283","line":37,"column":5,"nodeType":"253","endLine":37,"endColumn":14,"suggestions":"284"},{"ruleId":"251","severity":1,"message":"285","line":75,"column":5,"nodeType":"253","messageId":"254","endLine":75,"endColumn":13},{"ruleId":"251","severity":1,"message":"286","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":18},{"ruleId":"251","severity":1,"message":"277","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":16},{"ruleId":"278","severity":1,"message":"287","line":11,"column":3,"nodeType":"253","endLine":11,"endColumn":12,"suggestions":"288"},{"ruleId":"264","severity":1,"message":"265","line":12,"column":48,"nodeType":"266","messageId":"267","endLine":12,"endColumn":64,"fix":"289"},{"ruleId":"264","severity":1,"message":"290","line":13,"column":47,"nodeType":"266","messageId":"267","endLine":13,"endColumn":68,"fix":"291"},{"ruleId":"278","severity":1,"message":"292","line":33,"column":6,"nodeType":"293","endLine":33,"endColumn":23,"suggestions":"294"},{"ruleId":"251","severity":1,"message":"295","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":18},{"ruleId":"251","severity":1,"message":"296","line":2,"column":20,"nodeType":"253","messageId":"254","endLine":2,"endColumn":29},{"ruleId":"251","severity":1,"message":"297","line":11,"column":9,"nodeType":"253","messageId":"254","endLine":11,"endColumn":19},{"ruleId":"278","severity":1,"message":"298","line":17,"column":6,"nodeType":"293","endLine":17,"endColumn":18,"suggestions":"299"},{"ruleId":"278","severity":1,"message":"300","line":75,"column":6,"nodeType":"293","endLine":75,"endColumn":13,"suggestions":"301"},{"ruleId":"257","severity":1,"message":"258","line":84,"column":23,"nodeType":"259","messageId":"260","endLine":84,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":88,"column":30,"nodeType":"259","messageId":"260","endLine":88,"endColumn":32},{"ruleId":"257","severity":1,"message":"258","line":92,"column":30,"nodeType":"259","messageId":"260","endLine":92,"endColumn":32},{"ruleId":"257","severity":1,"message":"258","line":114,"column":74,"nodeType":"259","messageId":"260","endLine":114,"endColumn":76},{"ruleId":"257","severity":1,"message":"258","line":115,"column":74,"nodeType":"259","messageId":"260","endLine":115,"endColumn":76},{"ruleId":"257","severity":1,"message":"258","line":121,"column":17,"nodeType":"259","messageId":"260","endLine":121,"endColumn":19},{"ruleId":"302","severity":1,"message":"303","line":125,"column":35,"nodeType":"304","messageId":"305","endLine":125,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":135,"column":24,"nodeType":"259","messageId":"260","endLine":135,"endColumn":26},{"ruleId":"302","severity":1,"message":"303","line":139,"column":35,"nodeType":"304","messageId":"305","endLine":139,"endColumn":37},{"ruleId":"257","severity":1,"message":"258","line":165,"column":27,"nodeType":"259","messageId":"260","endLine":165,"endColumn":29},{"ruleId":"257","severity":1,"message":"258","line":172,"column":34,"nodeType":"259","messageId":"260","endLine":172,"endColumn":36},{"ruleId":"257","severity":1,"message":"258","line":179,"column":34,"nodeType":"259","messageId":"260","endLine":179,"endColumn":36},{"ruleId":"257","severity":1,"message":"258","line":211,"column":27,"nodeType":"259","messageId":"260","endLine":211,"endColumn":29},{"ruleId":"257","severity":1,"message":"258","line":218,"column":34,"nodeType":"259","messageId":"260","endLine":218,"endColumn":36},{"ruleId":"257","severity":1,"message":"258","line":225,"column":34,"nodeType":"259","messageId":"260","endLine":225,"endColumn":36},{"ruleId":"257","severity":1,"message":"258","line":264,"column":19,"nodeType":"259","messageId":"260","endLine":264,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":272,"column":21,"nodeType":"259","messageId":"260","endLine":272,"endColumn":23},{"ruleId":"257","severity":1,"message":"258","line":280,"column":19,"nodeType":"259","messageId":"260","endLine":280,"endColumn":21},{"ruleId":"257","severity":1,"message":"258","line":288,"column":21,"nodeType":"259","messageId":"260","endLine":288,"endColumn":23},{"ruleId":"257","severity":1,"message":"258","line":301,"column":26,"nodeType":"259","messageId":"260","endLine":301,"endColumn":28},{"ruleId":"257","severity":1,"message":"258","line":347,"column":18,"nodeType":"259","messageId":"260","endLine":347,"endColumn":20},{"ruleId":"257","severity":1,"message":"258","line":427,"column":22,"nodeType":"259","messageId":"260","endLine":427,"endColumn":24},{"ruleId":"251","severity":1,"message":"262","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":20},{"ruleId":"264","severity":1,"message":"265","line":16,"column":54,"nodeType":"266","messageId":"267","endLine":16,"endColumn":66,"fix":"306"},{"ruleId":"251","severity":1,"message":"307","line":9,"column":3,"nodeType":"253","messageId":"254","endLine":9,"endColumn":9},{"ruleId":"251","severity":1,"message":"308","line":10,"column":3,"nodeType":"253","messageId":"254","endLine":10,"endColumn":8},{"ruleId":"251","severity":1,"message":"309","line":11,"column":3,"nodeType":"253","messageId":"254","endLine":11,"endColumn":12},{"ruleId":"251","severity":1,"message":"310","line":12,"column":3,"nodeType":"253","messageId":"254","endLine":12,"endColumn":7},{"ruleId":"251","severity":1,"message":"311","line":14,"column":3,"nodeType":"253","messageId":"254","endLine":14,"endColumn":6},{"ruleId":"251","severity":1,"message":"252","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":15},{"ruleId":"251","severity":1,"message":"312","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":13},{"ruleId":"251","severity":1,"message":"313","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":13},{"ruleId":"278","severity":1,"message":"314","line":66,"column":6,"nodeType":"293","endLine":66,"endColumn":8,"suggestions":"315"},{"ruleId":"251","severity":1,"message":"295","line":1,"column":17,"nodeType":"253","messageId":"254","endLine":1,"endColumn":25},{"ruleId":"251","severity":1,"message":"316","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":15},"no-unused-vars","'isToday' is defined but never used.","Identifier","unusedVar","'deleteItem' is defined but never used.","'clearls' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'goToTab' is assigned a value but never used.","'compareAsc' is defined but never used.","'vsHistory' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"score\"] found.","Property","unnecessarilyComputedProperty",{"range":"317","text":"318"},"'calendar' is defined but never used.","'setItem' is defined but never used.","'CustomSelect' is defined but never used.","'heightList' is assigned a value but never used.","'weightList' is assigned a value but never used.","'select' is assigned a value but never used.","'changeMedium' is assigned a value but never used.","'delay' is assigned a value but never used.","'MetaCalc' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setMetaAge'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [form] as a second argument to the useEffect Hook.",["319"],"'Sector' is defined but never used.","'React' is defined but never used.","React Hook useEffect contains a call to 'setMetaAgeData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [typeFlag, newDiastolicBP, newPressure, newWaist, newGlucose, newTrigl, newHdl, age, diastolicBP, pressure, waist, glucose, trigl, hdl] as a second argument to the useEffect Hook.",["320"],"'miscData' is assigned a value but never used.","'ScoreLogic' is defined but never used.","React Hook useEffect contains a call to 'setScoreStyle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [form, score] as a second argument to the useEffect Hook.",["321"],{"range":"322","text":"318"},"Unnecessarily computed property [\"typeFlag\"] found.",{"range":"323","text":"324"},"React Hook useEffect has missing dependencies: 'key' and 'list'. Either include them or remove the dependency array. If 'setCurrentList' needs the current value of 'list', you can also switch to useReducer instead of useState and read 'list' in the reducer.","ArrayExpression",["325"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'innerStyle' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["326"],"React Hook useEffect has a missing dependency: 'selectDateRangeFunc'. Either include it or remove the dependency array.",["327"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"range":"328","text":"318"},"'Legend' is defined but never used.","'Brush' is defined but never used.","'AreaChart' is defined but never used.","'Area' is defined but never used.","'Dot' is defined but never used.","'Step1' is defined but never used.","'Step5' is defined but never used.","React Hook useEffect has a missing dependency: 'props.vsHistory'. Either include it or remove the dependency array.",["329"],"'Dayjs' is defined but never used.",[3002,3011],"\"score\"",{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},[511,520],[578,590],"\"typeFlag\"",{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},[731,740],{"desc":"342","fix":"343"},"Add dependencies array: [form]",{"range":"344","text":"345"},"Add dependencies array: [typeFlag, newDiastolicBP, newPressure, newWaist, newGlucose, newTrigl, newHdl, age, diastolicBP, pressure, waist, glucose, trigl, hdl]",{"range":"346","text":"347"},"Add dependencies array: [form, score]",{"range":"348","text":"349"},"Update the dependencies array to be: [currentSelected, key, list]",{"range":"350","text":"351"},"Update the dependencies array to be: [percentile, props]",{"range":"352","text":"353"},"Update the dependencies array to be: [props, selectDateRangeFunc]",{"range":"354","text":"355"},"Update the dependencies array to be: [props.vsHistory]",{"range":"356","text":"357"},[774,774],", [form]",[1563,1563],", [typeFlag, newDiastolicBP, newPressure, newWaist, newGlucose, newTrigl, newHdl, age, diastolicBP, pressure, waist, glucose, trigl, hdl]",[668,668],", [form, score]",[974,991],"[currentSelected, key, list]",[509,521],"[percentile, props]",[1639,1646],"[props, selectDateRangeFunc]",[1732,1734],"[props.vsHistory]"]